This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

# File Summary

## Purpose
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

## File Format
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A header with the file path (## File: path/to/file)
  b. The full contents of the file in a code block

## Usage Guidelines
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

## Notes
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: summaries/**/*.md
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

## Additional Info

# Directory Structure
```
summaries/
  adapters/
    mongodb.md
    pglite.md
    postgres.md
    qdrant.md
    sqlite.md
    sqljs.md
    supabase.md
  clients/
    alexa.md
    auto.md
    deva.md
    direct.md
    discord.md
    eliza-home.md
    farcaster.md
    github.md
    instagram.md
    lens.md
    simsai.md
    slack.md
    tako.md
    telegram-account.md
    telegram.md
    twitter.md
    xmtp.md
  plugins/
    0g.md
    0x.md
    3d-generation.md
    abstract.md
    advanced-sdk-ts.md
    agentkit.md
    akash.md
    allora.md
    ankr.md
    anyone.md
    aptos.md
    arbitrage.md
    arthera.md
    asterai.md
    ATTPs.md
    autonome.md
    avail.md
    avalanche.md
    aws-s3.md
    b2.md
    binance.md
    birdeye.md
    bittensor.md
    bnb.md
    bootstrap.md
    browser.md
    cache-redis.md
    ccxt.md
    chainbase.md
    coinbase.md
    coingecko.md
    coinmarketcap.md
    compass.md
    conflux.md
    cosmos.md
    cronos.md
    cronoszkevm.md
    d-a-t-a.md
    dcap.md
    depin.md
    desk-exchange.md
    devin.md
    dexscreener.md
    di.md
    dkg.md
    echochambers.md
    edwin.md
    eliza-nkn.md
    email-automation.md
    email.md
    ethstorage.md
    evm.md
    ferePro.md
    firecrawl.md
    flow-advanced.md
    flow.md
    football.md
    form.md
    fuel.md
    gelato.md
    genlayer.md
    gigbot.md
    giphy.md
    gitbook.md
    gitcoin-passport.md
    goat.md
    goplus.md
    grix.md
    holdstation.md
    hyperbolic.md
    hyperliquid.md
    icp.md
    image-generation.md
    image.md
    imgflip.md
    initia.md
    injective.md
    intiface.md
    iq6900.md
    irys.md
    isaacx.md
    lens-network.md
    lensNetwork.md
    letzai.md
    lightlink.md
    lightning.md
    lit.md
    llama.md
    massa.md
    merkle-eliza-plugin.md
    merkle.md
    messari-ai-toolkit.md
    mina.md
    mind-network.md
    moralis.md
    movement.md
    multichain.md
    multiversx.md
    near.md
    news.md
    nft-collections.md
    nft-generation.md
    nkn.md
    node.md
    nvidia-nim.md
    obsidian.md
    okto.md
    omniflix.md
    opacity.md
    open-weather.md
    openai.md
    para.md
    pdf.md
    primus.md
    pyth-data.md
    quai.md
    quick-intel.md
    rabbit-trader.md
    router-nitro.md
    sei.md
    sgx.md
    solana-agent-kit.md
    solana-agentkit.md
    solana-v2.md
    solana.md
    speech-tts.md
    spheron.md
    squid-router.md
    stargaze.md
    starknet.md
    story.md
    sui.md
    suno.md
    tee-log.md
    tee-marlin.md
    tee-verifiable-log.md
    tee.md
    thirdweb.md
    ton.md
    trikon.md
    trustdb.md
    trustgo.md
    tts.md
    twilio.md
    twitter.md
    udio.md
    viction.md
    video-generation.md
    video.md
    web-search.md
    whatsapp.md
    youtube-to-text.md
    zapper.md
    zerion.md
    zilliqa.md
    zksync-era.md
```

# Files

## File: summaries/adapters/mongodb.md
````markdown
# MongoDB Adapter for ElizaOS

## Purpose
A robust MongoDB adapter for ElizaOS that provides persistence, vector search capabilities, and caching functionality.

## Key Features
- Full MongoDB database support with connection pooling
- Vector search capabilities for efficient similarity searches
- Automatic fallback to standard search when vector search is unavailable
- Built-in caching system with TTL support
- Sharding support for better performance at scale
- Comprehensive memory and knowledge management
- Relationship tracking between users
- Goal tracking and management
- Participant and room management

## Installation
```bash
npm install @elizaos-plugins/adapter-mongodb
```

## Configuration
Add the adapter to your ElizaOS configuration:
```json
{
  "plugins": ["@elizaos-plugins/adapter-mongodb"],
  "settings": {
    "MONGODB_CONNECTION_STRING": "your_mongodb_connection_string",
    "MONGODB_DATABASE": "your_database_name" // Optional, defaults to "elizaAgent"
  }
}
```

### Required Environment Variables
- `MONGODB_CONNECTION_STRING`: Your MongoDB connection string
- `MONGODB_DATABASE` (optional): Database name to use

## Integration
The adapter provides persistence, vector search, and caching functionality for ElizaOS through MongoDB.

## Example Usage
```bash
cd src/__tests__
./run_tests.sh
```
````

## File: summaries/adapters/pglite.md
````markdown
# PGLite Adapter for ElizaOS

## Purpose
A lightweight PostgreSQL-compatible database adapter for ElizaOS, providing vector search capabilities and efficient data persistence in a local environment.

## Key Features
- Embedded PostgreSQL engine for local development and testing
- Full vector search support via pgvector
- Built-in fuzzy string matching
- Automatic schema initialization
- Memory-efficient caching system
- Support for multiple embedding providers (OpenAI, Ollama, GaiaNet)
- Transaction support with automatic rollback

## Installation
```bash
npm install @elizaos-plugins/adapter-pglite
```

## Configuration
Add the adapter to your ElizaOS configuration:

```json
{
  "plugins": ["@elizaos-plugins/adapter-pglite"],
  "settings": {
    "PGLITE_DATA_DIR": "/path/to/data/directory" // Required setting
  }
}
```

### Required Environment Variables
- `PGLITE_DATA_DIR`: Path to the directory where PGLite will store its data
  - Use `memory://` for in-memory database (useful for testing)

## Integration
The adapter automatically configures vector search based on your embedding provider and manages database tables, vector indexes, cache tables, and relationship tracking tables.
````

## File: summaries/adapters/postgres.md
````markdown
# ElizaOS PostgreSQL Adapter

## Purpose
A database adapter plugin for ElizaOS that provides PostgreSQL connectivity with vector embedding support for semantic search capabilities.

## Key Features
- Seamless integration with ElizaOS memory and knowledge storage systems
- Vector embedding storage and retrieval with pgvector extension
- Support for multiple embedding models and dimensions
- Robust connection management with automatic retries and circuit breaking
- Full transaction support for safe database operations
- Comprehensive memory, relationship, and knowledge management
- Built-in caching system

## Installation
Install the adapter via npm:
```bash
npm install @elizaos-plugins/adapter-postgres
```
Or using bun:
```bash
bun add @elizaos-plugins/adapter-postgres
```

## Configuration
Add to ElizaOS configuration:
```javascript
// agent.config.js
export default {
  adapters: ['postgres'],
  settings: {
    POSTGRES_URL: 'postgresql://username:password@localhost:5432/elizaos',
  },
};
```

## Prerequisites
- PostgreSQL 15+ with pgvector extension installed
- Connection permissions to create tables and extensions

## Integration
The adapter automatically initializes the required database schema when first connecting, providing methods for memory management, knowledge management, and vector search using pgvector for semantic capabilities.
````

## File: summaries/adapters/qdrant.md
````markdown
# Qdrant Adapter for ElizaOS

## Purpose
A vector database adapter for ElizaOS that provides efficient similarity search capabilities through Qdrant, optimized for knowledge management and semantic search operations.

## Key Features
- Vector similarity search with cosine distance
- Efficient knowledge base management
- Built-in text preprocessing for better search quality
- UUID v5 compatibility for Qdrant IDs
- In-memory caching system
- Content metadata support
- Shared knowledge management

## Installation
```bash
npm install @elizaos-plugins/adapter-qdrant
```

## Configuration
Add the adapter to your ElizaOS configuration:

```json
{
  "plugins": ["@elizaos-plugins/adapter-qdrant"],
  "settings": {
    "QDRANT_URL": "your-qdrant-server-url",
    "QDRANT_KEY": "your-qdrant-api-key",
    "QDRANT_PORT": "6333",
    "QDRANT_VECTOR_SIZE": "1536"
  }
}
```

### Required Environment Variables
- `QDRANT_URL`: URL of your Qdrant server
- `QDRANT_KEY`: API key for authentication
- `QDRANT_PORT`: Port number for Qdrant server
- `QDRANT_VECTOR_SIZE`: Dimension of your vectors

## Integration
The adapter implements knowledge management, vector similarity search, and caching operations for ElizaOS, while other database functions are stubbed but not implemented.
````

## File: summaries/adapters/sqlite.md
````markdown
# SQLite Adapter

## Purpose
A SQLite database adapter for ElizaOS that provides persistent storage capabilities with vector similarity search support.

## Key Features
- Full SQLite database implementation of ElizaOS database interface
- Vector similarity search via sqlite-vec extension
- JSON validation and foreign key constraints
- Built-in caching system
- Comprehensive transaction support with circuit breaker pattern
- Support for storing and retrieving various data types including memories, accounts, goals, and knowledge base

## Installation
```bash
npm install @elizaos-plugins/adapter-sqlite
```

## Configuration
- `SQLITE_FILE`: Path to the SQLite database file (default: `./data/db.sqlite`)
- Default database location is in a `data` directory in project root

## Integration
Implements the `IDatabaseAdapter` interface and extends the `DatabaseAdapter` base class to provide a lightweight, file-based storage solution for ElizaOS.

## Example Usage
```typescript
import sqlitePlugin from '@elizaos-plugins/adapter-sqlite';
import { IAgentRuntime } from '@elizaos/core';

// Initialize with ElizaOS runtime
function initializeAgent(runtime: IAgentRuntime) {
  runtime.use(sqlitePlugin);
}
```
````

## File: summaries/adapters/sqljs.md
````markdown
# Unmaintained

## Purpose
This plugin used to live in @elizaos/core and needs a maintainer.
````

## File: summaries/adapters/supabase.md
````markdown
# ElizaOS Supabase Adapter

## Purpose
This adapter enables ElizaOS to integrate with Supabase for data persistence and real-time capabilities.

## Prerequisites
- Supabase account and project
- ElizaOS installation
- Node.js and npm/yarn/bun

## Installation
```bash
npm install github:elizaos-plugins/adapter-supabase
```

## Configuration
1. Add the adapter to your character configuration:

```json
{
  "plugins": ["@elizaos-plugins/adapter-supabase"],
  "settings": {
    "secrets": {
      "SUPABASE_URL": "your-supabase-project-url",
      "SUPABASE_ANON_KEY": "your-supabase-anon-key"
    }
  }
}
```

2. Set up the database schema by running the migrations:
```bash
# Run the schema migration
psql -f schema.sql

# Seed the initial data
psql -f seed.sql
```

## Integration
Once configured, the adapter will automatically handle:
- Data persistence for character states and interactions
- Real-time updates for multi-user environments
- State synchronization across different instances
- Secure data storage and retrieval
````

## File: summaries/clients/alexa.md
````markdown
# ElizaOS Alexa Client Plugin

## Purpose
Enables ElizaOS agents to integrate with Amazon Alexa, allowing your ElizaOS character to interact with users through Alexa-enabled devices.

## Key Features
- Send proactive notifications to Alexa devices
- Connect ElizaOS agents to the Alexa Skills ecosystem
- Enable voice-based interaction with your ElizaOS character

## Installation
```bash
npm install @elizaos-plugins/client-alexa
```

## Configuration
Add the following environment variables or settings to your ElizaOS configuration:

```
ALEXA_SKILL_ID=your-skill-id
ALEXA_CLIENT_ID=your-client-id
ALEXA_CLIENT_SECRET=your-client-secret
```

## Integration
The plugin connects ElizaOS characters to Alexa-enabled devices, currently supporting one-way communication through proactive message alerts.

## Links
[Alexa Developer Console](https://developer.amazon.com/alexa/console/ask)
````

## File: summaries/clients/auto.md
````markdown
# ElizaOS Plugin

## Purpose
This plugin is a component of ElizaOS.

## Integration
The plugin is now incorporated into @elizaos/core rather than existing as a standalone plugin.

## Links
@elizaos/core
````

## File: summaries/clients/deva.md
````markdown
# ElizaOS Deva Client Plugin

## Purpose
A client plugin for ElizaOS that enables AI characters to seamlessly post content to the Deva social network.

## Key Features
- **Persona Management**: Automatically fetches and maintains character's Deva persona details
- **Post Timeline**: Synchronizes posts between Deva and ElizaOS memory system
- **Scheduled Posting**: Generates and publishes new posts on configurable time intervals
- **Customizable Templates**: Supports custom post templates for content generation
- **Style Preservation**: Ensures posts match your character's voice, style, and expertise

## Installation
```bash
npm install @elizaos-plugins/client-deva
```

## Configuration
Required settings:
| Setting             | Description                              | Default         |
| ------------------- | ---------------------------------------- | --------------- |
| `DEVA_API_KEY`      | Your Deva API key for authentication     | None (Required) |
| `DEVA_API_BASE_URL` | Base URL for the Deva API                | None (Required) |
| `POST_INTERVAL_MIN` | Minimum interval between posts (minutes) | 90              |
| `POST_INTERVAL_MAX` | Maximum interval between posts (minutes) | 180             |
| `POST_IMMEDIATELY`  | Whether to post immediately on startup   | false           |

## Integration
The plugin connects to the Deva API, fetches the character's persona details, retrieves existing posts and stores them in ElizaOS's memory system, and follows a posting schedule based on configured intervals.

## Example Usage
Once configured, the Deva client automatically:
1. Connects to the Deva API and fetches character's persona details
2. Retrieves existing posts and stores them in memory
3. Begins the posting schedule based on configured intervals
4. Generates and publishes new posts matching the character's style
````

## File: summaries/clients/direct.md
````markdown
# Query Params

## Purpose
A plugin that provides a way to get query parameters from the URL.

## Integration
This plugin is now part of the @elizaos/core package.
````

## File: summaries/clients/discord.md
````markdown
# @elizaos/client-discord

## Purpose
A Discord client implementation for ElizaOS, enabling rich integration with Discord servers for managing interactions, voice, and message handling.

## Key Features
- Handle server join events and manage initial configurations
- Voice event management via the voice manager
- Manage and process new messages with the message manager
- Slash command registration and interaction handling
- Disconnect websocket and unbind all listeners when required
- Robust permissions management for bot functionality

## Installation
As this is a workspace package, it's installed as part of the ElizaOS monorepo:
```bash
bun install
```

## Configuration
The client requires the following environment variables:
```bash
# Discord API Credentials
DISCORD_APPLICATION_ID=your_application_id
DISCORD_API_TOKEN=your_api_token

# Optional Settings
```

## Example Usage
### Basic Initialization
```typescript
import { DiscordClientInterface } from '@elizaos/client-discord';

// Initialize the client
const discordManager = await DiscordClientInterface.start(runtime);
```

### Slash Command Registration
```typescript
await discordManager.command.registerCommands([
  {
    name: 'example',
    description: 'An example slash command',
    options: [],
  },
]);
```
````

## File: summaries/clients/eliza-home.md
````markdown
# ElizaOS Home Plugin

## Purpose
Enables agents to control smart home devices, scenes, and rooms through SmartThings integration, handling commands like "turn on the lights" or "set the thermostat to 72 degrees."

## Key Features
- Control various smart home devices (lights, switches, thermostats, locks, etc.)
- Execute scenes and automations
- Discover available devices and their current states
- Process natural language commands for device control
- Group devices by room for organized management
- Support for multiple device capabilities (switch, level, color, temperature, etc.)

## Prerequisites
- A SmartThings account with connected devices
- A SmartThings personal access token
- ElizaOS installed and configured

## Installation
```bash
npm install @elizaos-plugins/client-eliza-home
```

## Configuration
Environment Variable:
- `SMARTTHINGS_TOKEN` (Required): SmartThings personal access token

Add to agent configuration:
```json
{
  "clients": ["home"]
}
```

## Integration
Connects with ElizaOS to allow agents to control smart home devices through natural language commands.

## Example Usage
- "Turn on the living room lights"
- "Set the thermostat to 72 degrees"
- "Dim the bedroom lights to 50%"
- "What devices do you see?"
- "Activate movie night scene"

## Links
[SmartThings Developer Workspace](https://account.smartthings.com/tokens)
````

## File: summaries/clients/farcaster.md
````markdown
# ElizaOS Farcaster Client

## Purpose
A plugin for ElizaOS that enables agent integration with the Farcaster social network.

## Key Features
- **Automated Posting**: Schedule and publish regular casts with configurable intervals
- **Engagement Monitoring**: Track mentions, replies, and interactions
- **Conversation Threading**: Build and maintain conversation context for natural interactions
- **Dry Run Mode**: Test functionality without actually posting to Farcaster
- **Configurable Settings**: Customize behavior via environment variables
- **Caching**: Efficient caching of profiles and casts for improved performance

## Installation
```bash
npm install @elizaos-plugins/client-farcaster
```

## Configuration
### Required Settings
| Parameter | Description |
| --- | --- |
| `FARCASTER_NEYNAR_API_KEY` | Neynar API key for accessing Farcaster |
| `FARCASTER_NEYNAR_SIGNER_UUID` | Signer UUID for your Farcaster account |
| `FARCASTER_FID` | Your Farcaster FID (identifier) |

### Optional Settings
Various parameters available including dry run mode, polling intervals, and post settings.

## Integration
```typescript
import { ElizaOS } from '@elizaos/core';
import farcasterPlugin from '@elizaos-plugins/client-farcaster';

// Initialize ElizaOS
const elizaOs = new ElizaOS({
  // ElizaOS configuration
});

// Register the Farcaster plugin
elizaOs.registerPlugin(farcasterPlugin);

// Start ElizaOS
elizaOs.start();
```

## Example Usage
Custom templates can be defined in agent character configuration to customize cast generation and responses.
````

## File: summaries/clients/github.md
````markdown
# Client-GitHub for Eliza Framework

## Purpose
A component of the Eliza framework designed to interact with GitHub repositories, providing functionalities to clone repositories, manage branches, create pull requests, and maintain file-based knowledge for Eliza agents.

## Key Features
- Repository Management: Clone, pull, and switch branches
- File Processing: Generate agent memories from repository files
- Pull Request Management: Create and manage pull requests programmatically
- Commit Operations: Stage, commit, and push files
- Knowledge Base Integration: Convert repository content into agent memories
- Branch Management: Flexible branch switching and creation

## Installation
```bash
bun add @elizaos/client-github
```

## Configuration
Environment variables required:
| Variable           | Description                         | Required |
| ------------------ | ----------------------------------- | -------- |
| `GITHUB_OWNER`     | Owner of the GitHub repository      | Yes      |
| `GITHUB_REPO`      | Repository name                     | Yes      |
| `GITHUB_BRANCH`    | Target branch (default: `main`)     | Yes      |
| `GITHUB_PATH`      | Path to focus on within the repo    | Yes      |
| `GITHUB_API_TOKEN` | GitHub API token for authentication | Yes      |

## Integration
The client leverages GitHub's REST API via the `@octokit/rest` library and integrates with Eliza framework through the `@elizaos/core` dependency.

## Example Usage
```typescript
// Initialization
import { GitHubClientInterface } from '@elizaos/client-github';
const client = await GitHubClientInterface.start(runtime);

// Creating Memories
await client.createMemoriesFromFiles();

// Creating Pull Requests
await client.createPullRequest(
  'Feature: Add new functionality',
  'feature/new-feature',
  [
    {
      path: 'src/feature.ts',
      content: '// New feature implementation',
    },
  ],
  'Implements new functionality with tests'
);

// Direct Commits
await client.createCommit('Update configuration', [
  {
    path: 'config.json',
    content: JSON.stringify(config, null, 2),
  },
]);
```
````

## File: summaries/clients/instagram.md
````markdown
# @elizaos/client-instagram

## Purpose
An Instagram client implementation for ElizaOS, enabling Instagram integration with support for media posting, comment handling, and interaction management.

## Key Features
- Instagram API integration using instagram-private-api
- Media post creation and scheduling
- Comment and interaction handling
- Profile management
- Media processing utilities
- Rate limiting and request queuing
- Session management and caching

## Installation
As this is a workspace package, it's installed as part of the ElizaOS monorepo:
```bash
bun install
```

## Configuration
The client requires environment variables for Instagram credentials, business account (optional), and posting configuration including intervals and action processing settings.

## Example Usage
### Basic Initialization
```typescript
import { InstagramClientInterface } from '@elizaos/client-instagram';

// Initialize the client
const instagramManager = await InstagramClientInterface.start(runtime);
```

### Posting Content
```typescript
// Post a single image
await instagramManager.post.createPost({
  media: [
    {
      type: 'IMAGE',
      url: 'path/to/image.jpg',
    },
  ],
  caption: 'Hello Instagram!',
});
```

### Handling Interactions
```typescript
// Handle comments
await instagramManager.interaction.handleComment({
  mediaId: 'media-123',
  comment: 'Great post!',
  userId: 'user-123',
});
```
````

## File: summaries/clients/lens.md
````markdown
# client-lens

## Purpose
A business analytics plugin for ElizaOS providing real-time insights on client data and business metrics.

## Integration
Connects with ElizaOS personal and professional client data system to analyze patterns and provide actionable recommendations.
````

## File: summaries/clients/simsai.md
````markdown
# Timeline Tracker

## Purpose
This plugin needs a maintainer.

## Links
Deprecated: this plugin needs a maintainer.
````

## File: summaries/clients/slack.md
````markdown
# Eliza Slack Client

## Purpose
This package provides Slack integration for the Eliza AI agent.

## Setup Guide
### Prerequisites
- A Slack workspace with installation permissions
- ngrok for local development
- Node.js and bun

## Configuration
Environment variables needed:
- SLACK_APP_ID
- SLACK_CLIENT_ID
- SLACK_CLIENT_SECRET
- SLACK_SIGNING_SECRET
- SLACK_BOT_TOKEN
- SLACK_VERIFICATION_TOKEN
- SLACK_SERVER_PORT

## Integration
Connects via Slack API using Events API and Interactivity endpoints. Requires specific OAuth scopes for bot functionality including reading messages, writing responses, and handling files.

## Example Usage
- Invite the bot to a channel: `/invite @eve`
- Mention the bot: `@eve hello`

## Links
[Slack API Apps page](https://api.slack.com/apps)
````

## File: summaries/clients/tako.md
````markdown
# Tako Client for Eliza

## Purpose
Tako Client integrates AI capabilities into Tako, a decentralized social app developed in collaboration with Farcaster.

## Installation
### Pre-Requisites
- Register a Tako account on [Tako App](https://app.tako.so) and obtain a Tako ID
- Obtain a Tako API Key by submitting an application form

## Configuration
Configure using environment variables or in character JSON file:
- TAKO_FID: Farcaster ID
- TAKO_API_KEY: Tako API Key
- TAKO_API_URL: Tako API URL
- TAKO_PROACTIVE_COMMENTING: Enable proactive content interaction
- TAKO_POLL_INTERVAL: Interval for proactive interactions
- TAKO_TARGET_FOLLOWERS: Interact with followed accounts
- TAKO_TARGET_USERS: List of FIDs to interact with
- TAKO_TARGET_COMMUNITIES: List of communities to interact with
- TAKO_BLACKLIST_USERS: FIDs to avoid interaction
- TAKO_CHAT_WITH_USER: Enable continuous replies
- TAKO_CHAT_INTERVAL: Reply interval
- TAKO_NEW_CAST: Enable periodic posting
- TAKO_NEW_CAST_INTERVAL: New content posting interval
- TAKO_START_DELAY: Enable random startup delay
- TAKO_DRY_RUN: Generate but don't post content

## Links
- [Tako App](https://app.tako.so)
- [API Documentation](https://takolab.notion.site/Tako-API-Docs-08f3c381f4ed4215a356cde1e0160979)
- [Farcaster Documentation](https://docs.farcaster.xyz/)
````

## File: summaries/clients/telegram-account.md
````markdown
# Client Telegram Account

## Purpose
The Telegram Account Plugin allows ElizaOS agents to connect and operate through a real Telegram account, enabling your agent to participate in Telegram chats, groups, and direct messages as a regular user.

## Key Features
- Connect to any Telegram account using API credentials
- Receive and respond to direct messages
- Participate in group chats when mentioned (@username)
- Reply to messages that reply to the account
- Support for multi-part messages (automatically splits long messages)
- Proper Markdown formatting in responses
- Media attachment support

## Prerequisites
- A Telegram account with an active phone number
- Telegram API credentials (App ID and App Hash)
- ElizaOS installed and configured

## Installation
```bash
npm install @elizaos-plugins/client-telegram-account
```

## Configuration
Environment variables:
```
TELEGRAM_ACCOUNT_PHONE="+1234567890"
TELEGRAM_ACCOUNT_APP_ID=12345
TELEGRAM_ACCOUNT_APP_HASH="your_api_hash_here"
TELEGRAM_ACCOUNT_DEVICE_MODEL="Desktop"
TELEGRAM_ACCOUNT_SYSTEM_VERSION="1.0"
```

Add to agent configuration:
```json
{
  "clients": ["telegramAccount"]
}
```

## Integration
Once configured, your agent will:
- Respond to direct messages automatically
- Respond in groups when specifically mentioned with @username
- Respond to replies to its own messages
- Process incoming media files
- Format responses using Markdown
- Split long messages into multiple parts if necessary
````

## File: summaries/clients/telegram.md
````markdown
# Telegram Client Plugin for ElizaOS

## Purpose
This plugin integrates a Telegram client with ElizaOS, allowing characters in ElizaOS to interact via Telegram.

## Key Features
- Seamless Telegram Integration
- Configuration Validation
- Startup Logging
- Future-proof Design

## Configuration
| Key | Type | Default | Description |
| --- | --- | --- | --- |
| `clients` | Array | Required | Specifies the client type (e.g., `["telegram"]`). |
| `allowDirectMessages` | Boolean | `false` | Determines whether the bot should respond to direct messages. |
| `shouldOnlyJoinInAllowedGroups` | Boolean | `false` | Ensures the bot only joins and responds in specified groups. |
| `allowedGroupIds` | Array | `[]` | Lists the group IDs the bot is allowed to interact with. |
| `messageTrackingLimit` | Integer | `100` | Sets the maximum number of messages to track in memory for each chat. |
| `templates` | Object | `{}` | Allows customization of response templates for different message scenarios. |

## Integration
The plugin connects ElizaOS characters to Telegram through the bot API, allowing them to interact via Telegram.

## Example Usage
```json
{
  "clients": ["telegram"],
  "allowDirectMessages": true,
  "shouldOnlyJoinInAllowedGroups": true,
  "allowedGroupIds": ["-123456789", "-987654321"],
  "messageTrackingLimit": 100,
  "templates": {
    "telegramMessageHandlerTemplate": "Your custom template here"
  },
  "secrets": {
    "key": "<your-bot-token>"
  }
}
```
````

## File: summaries/clients/twitter.md
````markdown
# Eliza Twitter/X Client

## Purpose
This package provides Twitter/X integration for the Eliza AI agent.

## Key Features
- Post generation and management
- Interaction handling (mentions, replies)
- Search functionality
- Twitter Spaces support with STT/TTS capabilities
- Media handling (images, videos)
- Approval workflow via Discord (optional)

## Configuration
Create or edit `.env` file with Twitter API credentials, client configuration, post generation settings, action processing settings, Spaces configuration, and approval workflow settings.

## Integration
```typescript
import { TwitterClientInterface } from '@elizaos/twitter';

const twitterPlugin = {
  name: 'twitter',
  description: 'Twitter client',
  clients: [TwitterClientInterface],
};

// Register with your Eliza runtime
runtime.registerPlugin(twitterPlugin);
```

## Example Usage
The client can automatically generate and post tweets, handle interactions (mentions, replies, quote tweets, direct messages), search Twitter for relevant topics, create and manage Twitter Spaces, and utilize an optional Discord-based approval system for tweets.
````

## File: summaries/clients/xmtp.md
````markdown
# XMTP Client package

## Purpose
The XMTP client enables secure, decentralized, and encrypted messaging integration with ElizaOS.

## Key Features
- End-to-end encryption and regulatory compliance
- Open-source and trustless (built on MLS protocol)
- Privacy and metadata protection
- Decentralized peer-to-peer network
- Multi-tenant communication support

## Installation
```bash
bun add @elizaos/client-xmtp
```

## Configuration
```tsx
// Configuration in .env
WALLET_KEY= // the private key of the wallet
ENCRYPTION_KEY= // a second random 32 bytes encryption key for local db encryption
```

## Integration
```tsx
import { XmtpClientInterface } from "@elizaos/client-xmtp";

// Initialize the XMTP client
const client = await XmtpClientInterface.start(runtime);
```

## Links
- [Agent examples repo](https://github.com/ephemeraHQ/xmtp-agent-examples)
- [XMTP FAQ](https://docs.xmtp.org/intro/faq)
- [Web inbox](https://xmtp.chat)
````

## File: summaries/plugins/0g.md
````markdown
# @elizaos/plugin-0g

## Purpose
A plugin for storing data using the 0G protocol within the ElizaOS ecosystem, enabling seamless integration with the Zero Gravity (0G) protocol for decentralized file storage.

## Installation
```bash
bun install @elizaos/plugin-0g
```

## Configuration
The plugin requires the following environment variables:
```typescript
ZEROG_INDEXER_RPC=<0G indexer RPC endpoint>
ZEROG_EVM_RPC=<0G EVM RPC endpoint>
ZEROG_PRIVATE_KEY=<Private key for transactions>
ZEROG_FLOW_ADDRESS=<0G Flow contract address>
```

## Integration
```typescript
import { zgPlugin } from '@eliza/plugin-0g';
```

## Example Usage
```typescript
'Upload my document.pdf';
'Store this image.png on 0G';
'Save my resume.docx to Zero Gravity';
```

## Links
- [0G Documentation](https://docs.0g.xyz/)
- [IPFS Documentation](https://docs.ipfs.tech/)
- [Filecoin Docs](https://docs.filecoin.io/)
- [Flow Documentation](https://developers.flow.com/)
````

## File: summaries/plugins/0x.md
````markdown
# @elizaos/plugin-0x

## Purpose
This plugin enables Eliza to interact with the 0x Protocol, providing decentralized exchange capabilities across multiple evm blockchain networks with optimized token swaps and liquidity aggregation.

## Key Features
- Supports multiple networks including Ethereum Mainnet, Polygon, Binance Smart Chain, Arbitrum, Optimism, Base, Linea, Scroll, Avalanche, and Blast

## Installation
```bash
bun install @elizaos/plugin-0x
```

## Configuration
Set environment variables:
```env
WALLET_PRIVATE_KEY=your_private_key
ZERO_EX_API_KEY=your_0x_api_key
{chain}_RPC_URL=your_rpc_endpoint
```

## Integration
```typescript
import { zeroExPlugin } from '@elizaos/plugin-0x';
```

## Example Usage
The plugin supports natural language commands:
- "I want to convert 1 ETH to USDC on ethereum chain"
- "Give me the quote"
- "Execute it"

Available actions:
1. GET_INDICATIVE_PRICE_0X: Get indicative prices for token swaps
2. GET_QUOTE_0X: Get the quote for the swap
3. EXECUTE_SWAP_0X: Execute token swaps

## Links
- [0x Protocol](https://0x.org/)
- [0x API Documentation](https://0x.org/docs/api)
````

## File: summaries/plugins/3d-generation.md
````markdown
# @elizaos/plugin-3d-generation

## Purpose
A plugin for generating 3D models using the FAL.ai API within the ElizaOS ecosystem.

## Key Features
- AI-powered creation of 3D models from text descriptions
- Ability to save models locally
- Multiple file format support (glb, usdz, fbx, obj, stl)
- Different quality and material settings

## Installation
```bash
bun install @elizaos/plugin-3d-generation
```

## Configuration
Requires the following environment variable:
```typescript
FAL_API_KEY=<Your FAL.ai API key>
```

## Integration
The plugin responds to natural language commands like "Generate a 3D object of a cat playing piano" and offers multiple action aliases (GENERATE_3D, 3D_GENERATION, TEXT_TO_3D, etc.).

## Example Usage
```typescript
import { ThreeDGenerationPlugin } from '@elizaos/plugin-3d-generation';

// Example commands:
'Generate a 3D object of a cat playing piano';
'Create a 3D object of an anime character Goku';
'Make a 3D model of [your description]';
```

## Links
- [FAL.ai Documentation](https://fal.ai/docs)
- [Three.js Documentation](https://threejs.org/docs/)
- [glTF Specification](https://github.com/KhronosGroup/glTF)
- [USD Documentation](https://graphics.pixar.com/usd/docs/index.html)
````

## File: summaries/plugins/abstract.md
````markdown
# @elizaos/plugin-abstract

## Purpose
A plugin for interacting with the Abstract blockchain network, enabling seamless token transfers on the Abstract testnet.

## Installation
```bash
bun install @elizaos/plugin-abstract
```

## Configuration
The plugin requires these environment variables:
```typescript
ABSTRACT_ADDRESS=<Your Abstract wallet address>
ABSTRACT_PRIVATE_KEY=<Your Abstract private key>
```

## Integration
The plugin responds to natural language commands for token transfers on the Abstract network, including native ETH and ERC20 tokens.

## Example Usage
```typescript
// Import
import { abstractPlugin } from '@elizaos/plugin-abstract';

// Example commands:
'Send 100 USDC to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62';
'Transfer 0.1 ETH to 0xbD8679cf79137042214fA4239b02F4022208EE82';
'Pay 50 USDC on Abstract to [address]';
```

## Links
- [Abstract](https://abs.xyz/): Consumer blockchain
- [viem](https://viem.sh/): Typescript web3 client
````

## File: summaries/plugins/advanced-sdk-ts.md
````markdown
# Coinbase Advanced API TypeScript SDK

## Purpose
A TypeScript SDK that allows developers to easily integrate with the Coinbase Advanced API, providing access to real-time market data, order management, and execution.

## Installation
```bash
npm install
```

## Build and Use
```bash
npm run build
node dist/{INSERT-FILENAME}.js
```

## Configuration
Requires Coinbase Developer Platform (CDP) API keys that must be created by following the instructions in the documentation.

## Integration
Import the RESTClient from the SDK and initialize with API keys:
```
import { RESTClient } from './rest';
const client = new RESTClient(API_KEY, API_SECRET);
```

## Example Usage
- List Accounts: `client.listAccounts({})`
- Get Product: `client.getProduct({productId: "BTC-USD"})`
- Create Order: `client.createOrder()` with appropriate parameters

## Links
- [Coinbase Advanced API](https://docs.cdp.coinbase.com/advanced-trade/docs/welcome)
- [API Reference](https://docs.cdp.coinbase.com/advanced-trade/reference/)
````

## File: summaries/plugins/agentkit.md
````markdown
# @elizaos/plugin-agentkit

## Purpose
AgentKit plugin for Eliza that enables interaction with CDP AgentKit tools for NFT and token management.

## Installation
```bash
bun install
```

## Configuration
Environment variables:
```env
CDP_API_KEY_NAME=your_key_name
CDP_API_KEY_PRIVATE_KEY=your_private_key
CDP_AGENT_KIT_NETWORK=base-sepolia # Optional: Defaults to base-sepolia
```

Character configuration:
```json
{
  "plugins": ["@elizaos/plugin-agentkit"],
  "settings": {
    "secrets": {
      "CDP_API_KEY_NAME": "your_key_name",
      "CDP_API_KEY_PRIVATE_KEY": "your_private_key"
    }
  }
}
```

## Key Features
Available tools:
- GET_WALLET_DETAILS
- DEPLOY_NFT
- DEPLOY_TOKEN
- GET_BALANCE
- MINT_NFT
- REGISTER_BASENAME
- REQUEST_FAUCET_FUNDS
- TRADE
- TRANSFER
- WOW_BUY_TOKEN
- WOW_SELL_TOKEN
- WOW_CREATE_TOKEN

Supported networks:
- Base Sepolia (default)
- Base Mainnet

## Example Usage
- Get wallet details: "Can you show me my wallet details?"
- Deploy NFT collection: "Deploy a new NFT collection called 'Music NFTs' with symbol 'MUSIC'"
- Create token: "Create a new WOW token called 'Artist Token' with symbol 'ART'"
- Check balance: "What's my current balance?"
````

## File: summaries/plugins/akash.md
````markdown
# Akash Network Plugin for Eliza

## Purpose
A powerful plugin for interacting with the Akash Network, enabling deployment management and cloud compute operations through Eliza.

## Installation
```bash
bun add @elizaos/plugin-akash
```

## Configuration
### Environment Variables
Requires a `.env` file with network configuration, transaction settings, authentication (including AKASH_MNEMONIC), manifest settings, and deployment settings.

### Directory Structure
- SDL files stored in `src/sdl/`
- SSL certificates stored in `src/.certificates/`

## Available Actions
- CREATE_DEPLOYMENT
- CLOSE_DEPLOYMENT
- GET_PROVIDER_INFO
- GET_DEPLOYMENT_STATUS
- GET_GPU_PRICING
- GET_MANIFEST
- GET_PROVIDERS_LIST

## Error Handling
Includes specific error codes for SDL validation, wallet initialization, deployment creation, API requests, manifest parsing, and provider filtering issues.
````

## File: summaries/plugins/allora.md
````markdown
# @elizaos/plugin-allora

## Purpose
Seamlessly empowers Eliza agents with real-time, advanced, self-improving AI inferences from the Allora Network.

## Installation
```bash
bun add @elizaos/plugin-allora
```

## Configuration
### Environment Variables
```env
ALLORA_API_KEY=your_api_key          # Required: Allora API key
ALLORA_CHAIN_SLUG=testnet            # Optional: Defaults to testnet
```

### Character Configuration
Add the plugin to your character's configuration:
```typescript
import { alloraPlugin } from '@elizaos/plugin-allora';

const character = {
  plugins: [alloraPlugin],
  settings: {
    secrets: {
      ALLORA_API_KEY: 'your_api_key',
    },
  },
};
```

## Key Features
- **Real-time Inference Access**: Get live predictions across various topics
- **Topic Management**: Automatic discovery and caching of available topics
- **Smart Caching**: 30-minute cache duration for optimal performance
- **Natural Language Interface**: Simple conversational commands for accessing predictions

## Example Usage
Users can request inferences using natural language:
```plaintext
"What is the predicted ETH price in 5 minutes?"
"Can you check the current BTC prediction?"
```

Example Response:
```plaintext
"Inference provided by Allora Network on topic ETH 5min (Topic ID: 13): 3393.364326646801085508"
```

## Links
[Allora-Eliza integration docs](https://docs.allora.network/marketplace/integrations/eliza-os/implementation)
````

## File: summaries/plugins/ankr.md
````markdown
# Ankr Plugin

## Purpose
Blockchain Data Query Interface that provides comprehensive blockchain data querying capabilities through natural language prompts.

## Key Features
- Blockchain Information (stats, top currencies)
- Wallet & Balance Queries
- NFT Operations (holders, metadata, ownership, transfers)
- Token Operations (holders, holder count, price, transfers)
- Transaction Queries (by address, transaction details)

## Integration
Uses a tag-based system for structured queries, including:
- [chain] - Blockchain identifier (eth, bsc)
- [wallet] - Wallet address
- [contract] - Contract address
- [token] - Token ID
- [txHash] - Transaction hash
- [fromtimestamp] - Start timestamp
- [totimestamp] - End timestamp
````

## File: summaries/plugins/anyone.md
````markdown
# @elizaos/plugin-anyone

## Purpose
A plugin for integrating Anyone protocol proxy services into Eliza agents.

## Key Features
- Start and stop Anyone client services
- Automatic proxy configuration for axios
- SOCKS proxy support (port 9050)
- Clean proxy cleanup and restoration

## Installation
```bash
bun add @elizaos/plugin-anyone
```

## Integration
The plugin provides two main services:
1. `AnyoneClientService`: Manages the Anyone client instance with singleton pattern implementation
2. `AnyoneProxyService`: Handles axios proxy configuration

## Example Usage
```typescript
import { anyonePlugin } from '@elizaos/plugin-anyone';

const character = {
  plugins: [anyonePlugin],
};
```

Available commands:
- START_ANYONE: "Can you start Anyone for me?"
- STOP_ANYONE: "Please shut down Anyone"
````

## File: summaries/plugins/aptos.md
````markdown
# @elizaos/plugin-aptos

## Purpose
A plugin for interacting with the Aptos blockchain network within the ElizaOS ecosystem, enabling seamless token transfers and wallet management.

## Key Features
- Transfer APT tokens 
- Monitor wallet balances
- Real-time price tracking
- Portfolio value calculation
- Cached wallet information (5-minute TTL)

## Installation
```bash
bun install @elizaos/plugin-aptos
```

## Configuration
Environment variables required:
```typescript
APTOS_PRIVATE_KEY=<Your Aptos private key>
APTOS_NETWORK=<"mainnet" | "testnet">
```

## Integration
The plugin responds to natural language commands like:
- 'Send 69 APT tokens to [address]'
- 'Transfer APT to [address]'
- 'Pay [amount] APT to [recipient]'

## Example Usage
```typescript
import { aptosPlugin, WalletProvider, TransferAptosToken } from '@elizaos/plugin-aptos';
```

## Links
- Aptos Documentation: https://aptos.dev/
- Move Language Guide: https://move-language.github.io/move/
- Petra Wallet Docs: https://petra.app/docs
- DexScreener API: https://docs.dexscreener.com/
````

## File: summaries/plugins/arbitrage.md
````markdown
# ElizaOS Arbitrage Plugin

## Purpose
A powerful DEX arbitrage trading plugin for ElizaOS, designed to identify and automatically execute profitable cross-market trading opportunities on Ethereum-based decentralized exchanges.

## Key Features
- Real-time Market Monitoring
- Automated Opportunity Detection
- Smart Trade Execution
- Configurable Trading Parameters
- Risk Management
- Performance Optimization

## Installation
```bash
npm install @elizaos-plugins/plugin-arbitrage
```

## Configuration
```json
{
  "name": "Trader",
  "settings": {
    "secrets": {
      "EVM_PRIVATE_KEY": "YOUR_PRIVATE_KEY_HERE",
      "FLASHBOTS_RELAY_SIGNING_KEY": "YOUR_FLASHBOTS_KEY_HERE",
      "BUNDLE_EXECUTOR_ADDRESS": "YOUR_EXECUTOR_ADDRESS_HERE"
    },
    "arbitrage": {
      "ethereumWsUrl": "YOUR_ETH_WSS_URL",
      "rpcUrl": "YOUR_ETH_RPC_URL"
    }
  },
  "plugins": ["@elizaos/plugin-arbitrage", "@elizaos/plugin-evm"]
}
```

## Integration
The plugin integrates with ElizaOS and provides actions like `EXECUTE_ARBITRAGE` and providers such as `marketProvider`.

## Example Usage
```
User: "Find arbitrage opportunities"
Trader: "Scanning for arbitrage trades..."
```
````

## File: summaries/plugins/arthera.md
````markdown
# @elizaos/plugin-arthera

## Purpose
This plugin provides actions and providers for interacting with Arthera.

## Configuration
### Default Setup
By default, Arthera is enabled. Add your private key to the .env file:
```env
ARTHERA_PRIVATE_KEY=your-private-key-here
```

### Custom RPC URLs
To use a custom RPC URL for a specific chain:
```env
ETHEREUM_PROVIDER_<CHAIN_NAME>=https://your-custom-rpc-url
```

Example:
```env
ETHEREUM_PROVIDER_ARTHERA=https://rpc.arthera.net
```

## Integration
The Wallet Provider initializes with Arthera and:
- Provides context of the currently connected address and its balance
- Creates Public and Wallet clients to interact with the supported chain

## Example Usage
```bash
Transfer 1 AA to 0xRecipient on arthera.
```

## Contribution
The plugin contains tests. Run tests before submitting a PR:
```bash
bun test
```
````

## File: summaries/plugins/asterai.md
````markdown
# @elizaos/plugin-asterai

## Purpose
A plugin for interacting with asterai plugins and agents to expand Eliza character's utility by giving it access to all the functionality of asterai's ecosystem.

## Installation
```bash
bun install @elizaos/plugin-asterai
```

## Configuration
The plugin requires environment variables:
```typescript
ASTERAI_AGENT_ID=
ASTERAI_PUBLIC_QUERY_KEY=
```

## Integration
Import in your code:
```typescript
import { asteraiPlugin } from '@elizaos/plugin-asterai';
```

## Example Usage
The plugin supports natural language for interacting with the asterai agent through your Eliza character:
```typescript
"Hey Eliza, how's the weather in LA?";
```
Eliza will query the asterai agent to fetch the information.
````

## File: summaries/plugins/ATTPs.md
````markdown
# @elizaos/plugin-attps

## Purpose
Foundation plugin that enables advanced agent interactions, data verification, and price queries on the Eliza OS platform.

## Key Features
- **Agent Operations**: Creation, registration, multi-signer framework
- **Data Verification**: Chain validation, transaction execution, auto-hashing, metadata parsing
- **Price Queries**: Live price data, format validation, APIs integration
- **Security Features**: Access control, verification

## Installation
```bash
npm install @elizaos/plugin-attps
```

## Configuration
Configure with environment variables:
- ATTPS_RPC_URL
- ATTPS_PROXY_ADDRESS
- ATTPS_PRIVATE_KEY
- ATTPS_CONVERTER_ADDRESS
- ATTPS_AUTO_HASH_DATA

## Integration
Initializes within the Eliza runtime system using the provided plugin architecture.

## Example Usage
```typescript
import { attpsPlugin } from '@elizaos/plugin-attps';

// Initialize the plugin
const runtime = await initializeRuntime({
  plugins: [attpsPlugin],
});

// Actions: CREATE_AND_REGISTER_AGENT, VERIFY, PRICE_QUERY
```

## Links
- [Apro Documentation](https://docs.apro.com/en)
````

## File: summaries/plugins/autonome.md
````markdown
# @elizaos/plugin-autonome

## Purpose
A plugin that enables launching new Eliza agents through the Autonome platform.

## Installation
```bash
bun add @elizaos/plugin-autonome
```

## Configuration
### Environment Variables
```env
# Required: JWT token from Autonome platform
AUTONOME_JWT_TOKEN=your_jwt_token

# Required: Autonome RPC endpoint (fixed production endpoint)
AUTONOME_RPC=https://wizard-bff-rpc.alt.technology/v1/bff/aaa/apps
```

To get your JWT token:
1. Login to [dev.autonome.fun](https://dev.autonome.fun)
2. Open browser developer console
3. Extract your JWT token

### Character Configuration
```typescript
import { autonomePlugin } from '@elizaos/plugin-autonome';

const character = {
  plugins: [autonomePlugin],
};
```

## Key Features
- Launch new Eliza agents through the Autonome platform
- Configure agent settings via natural language
- Track deployment status
- Direct integration with Autonome dashboard

## Example Usage
The plugin responds to deployment commands like:
```plaintext
"Launch an agent, name is xiaohuo"
"Create a new agent"
"Deploy an Eliza agent"
```

## Links
[Autonome platform](https://dev.autonome.fun)
````

## File: summaries/plugins/avail.md
````markdown
# @elizaos/plugin-avail - Plugin for Avail

## Purpose
A plugin for using Eliza to interact with the Avail DA network. Defaults to Turing testnet, but can be customized to use Mainnet by changing the RPC in the `.env` file.

## Key Features
- Transfer AVAIL tokens from the agent's wallet to another wallet
- Submit arbitrary data to the Avail DA network

## Configuration
- `AVAIL_RPC_URL`: RPC endpoint (defaults to Turing testnet)
- `AVAIL_ADDRESS`: Public address for the agent account
- `AVAIL_SEED`: Seed phrase for the agent account
- `AVAIL_APP_ID`: Customize the Avail appID for data submission

## Example Usage
- Transfer: "Send 100 AVAIL to 5GWbvXjefEvXXETtKQH7YBsUaPc379KAQATW1eqeJT26cbsK"
- Submit data: "Submit the following data to Avail 'Hello World!'"

## Links
- [Avail Documentation](https://docs.availproject.org/)
- [Set up an Avail Account](https://docs.availproject.org/user-guides/accounts#seed-phrases)
- [Network Information](https://docs.availproject.org/docs/networks)
- [Learn about appIDs](https://docs.availproject.org/docs/build-with-avail/interact-with-avail-da/app-id)
- [Learn about Avail](https://www.availproject.org/)
- [Awesome Avail Repo](https://github.com/availproject/awesome-avail)
````

## File: summaries/plugins/avalanche.md
````markdown
# @elizaos/plugin-avalanche

## Purpose
A plugin for interacting with the Avalanche blockchain network within the ElizaOS ecosystem, enabling comprehensive DeFi operations including token transfers, YAK swaps, yield strategy management, and token creation.

## Installation
```bash
bun install @elizaos/plugin-avalanche
```

## Configuration
The plugin requires the following environment variable:
```typescript
AVALANCHE_PRIVATE_KEY=<Your Avalanche private key>
```

## Key Features
1. Token Transfers
   - Send native AVAX and ERC20 tokens
   - Support for multiple token standards
   - Built-in address validation

2. YAK Swaps
   - Decentralized token swaps
   - Automatic best path finding
   - Slippage protection (default: 0.2%)

3. Yield Strategies
   - Deposit tokens into yield-generating strategies
   - Support for multiple strategies (YAK staking, USDC Benqi, etc.)

4. Token Mill
   - Create new tokens
   - Configure custom tokenomics
   - Automatic market creation

## Example Usage
### Token Transfer
```typescript
'Send 10 AVAX to 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7';
'Transfer 100 USDC to [address]';
```

### YAK Swap
```typescript
'Swap 1 AVAX for USDC';
'Swap 10 USDC for gmYAK';
```

### Yield Strategy
```typescript
'Deposit 1 USDC into the strategy';
'Deposit 10 gmYAK to earn yield';
```

### Token Creation
```typescript
"Create a new memecoin called 'Test Token' with the symbol 'TEST'";
```

## Links
- [Avalanche Documentation](https://docs.avax.network/)
- [YAK Protocol Docs](https://yak.exchange/docs)
- [Benqi Documentation](https://docs.benqi.fi/)
- [Token Mill Guide](https://docs.tokenmill.xyz/)
````

## File: summaries/plugins/aws-s3.md
````markdown
# @elizaos/plugin-node

## Purpose
Core Node.js plugin for Eliza OS that provides AWS S3 integration for file operations and cloud storage.

## Key Features
- AWS S3 Integration: File upload and management with AWS S3

## Installation
```bash
npm install @elizaos/plugin-node
```

## Configuration
The plugin requires AWS environment variables:
```env
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_REGION=your_aws_region
AWS_S3_BUCKET=your_s3_bucket
AWS_S3_UPLOAD_PATH=your_upload_path
AWS_S3_ENDPOINT=an_alternative_endpoint
AWS_S3_SSL_ENABLED=boolean(true|false)
AWS_S3_FORCE_PATH_STYLE=boolean(true|false)
```

## Integration
```typescript
import { createNodePlugin } from '@elizaos/plugin-node';

// Initialize the plugin
const nodePlugin = createNodePlugin();

// Register with Eliza OS
elizaos.registerPlugin(nodePlugin);
```

## Services
### AwsS3Service
Handles file uploads and management with AWS S3.
````

## File: summaries/plugins/b2.md
````markdown
# @elizaos/plugin-b2

## Purpose
A plugin for interacting with the B2-Network within the ElizaOS ecosystem, enabling seamless token transfers on the B2-Network.

## Key Features
- Token Transfers (native B2-BTC and ERC20 tokens)
- Support for multiple token standards
- Built-in address validation
- Wallet Provider (displays balances with real-time updates)
- Tokens Provider (lists supported tokens and addresses)

## Installation
```bash
bun install @elizaos/plugin-b2
```

## Configuration
Requires the following environment variable:
```typescript
B2_PRIVATE_KEY=<Your B2 private key>
```

## Integration
Integrates into the Eliza platform to enhance its capabilities with B2-Network token transfer functionality.

## Example Usage
```typescript
// Send B2-BTC
'Send 1 B2-BTC to 0x4f9e2dc50B4Cd632CC2D24edaBa3Da2a9338832a';

// Send ERC20
'Transfer 100 USDC to [address]';
```

## Links
None provided.
````

## File: summaries/plugins/binance.md
````markdown
# Binance Plugin for Eliza

## Purpose
This plugin enables Eliza to interact with the Binance cryptocurrency exchange, providing capabilities for checking prices, executing trades, and managing spot wallet balances.

## Key Features
- Real-time cryptocurrency price checks
- Spot trading (market and limit orders)
- Wallet balance inquiries
- Comprehensive error handling
- Secure API integration

## Prerequisites
1. Binance Account
2. API Keys with spot trading permissions

## Configuration
Set environment variables:
```env
BINANCE_API_KEY=your_api_key
BINANCE_SECRET_KEY=your_secret_key
```

## Installation
```json
{
  "plugins": ["@elizaos/plugin-binance"]
}
```

## Integration
The plugin provides three actions:
1. GET_PRICE: Check cryptocurrency prices
2. EXECUTE_SPOT_TRADE: Execute spot trades
3. GET_SPOT_BALANCE: Check wallet balances

## Example Usage
- "What's the current price of Bitcoin?"
- "Buy 0.1 BTC at market price"
- "What's my BTC balance?"
````

## File: summaries/plugins/birdeye.md
````markdown
# Eliza Birdeye Plugin

## Purpose
A plugin that integrates with Birdeye's comprehensive DeFi and token analytics API, providing real-time access to blockchain data, token metrics, and DeFi analytics across multiple networks.

## Key Features
- **Agent Portfolio Provider**: Fetches wallet portfolio data when BIRDEYE_WALLET_ADDR is set
- **Token Search Address**: Queries Birdeye for information about token addresses found in messages
- **Token Search Symbol**: Searches for token symbols in format $SYMBOL and retrieves information (supports SOL, SUI, ETH)
- **Wallet Search Address**: Queries Birdeye for information about wallet addresses found in messages

## Integration
Integrates with Eliza by providing access to Birdeye API endpoints through structured interfaces.

## Links
[Birdeye's API Documentation](https://public-api.birdeye.so)
````

## File: summaries/plugins/bittensor.md
````markdown
# @elizaos/plugin-bittensor

## Purpose
A plugin that integrates BitMind's API into ElizaOS agents, enabling access to AI services and digital assets powered by the Bittensor network.

## Key Features
- SN34 - Deepfake Detection
  - Real-time analysis of image authenticity
  - Confidence scoring for AI influence detection
  - Detailed response formatting with binary classification, percentage-based AI influence rating, risk assessment, and visual indicators

## Installation
```bash
bun install @elizaos/plugin-bittensor
```

## Integration
Enables agents to interact with BitMind's API to access AI capabilities on Bittensor's decentralized network, including inference, media generation, and deepfake detection services.
````

## File: summaries/plugins/bnb.md
````markdown
# @ai16z/plugin-bnb

## Purpose
This plugin enables interaction with the BNB Chain ecosystem, providing support for BNB Smart Chain, opBNB, and BNB Greenfield networks.

## Configuration
### Default Setup
By default, **plugin-bnb** is not enabled. To use it, add your private key and/or public key to the `.env` file. If private key is not provided, some actions will be disabled.

```env
BNB_PRIVATE_KEY=your-private-key-here
BNB_PUBLIC_KEY=your-public-key-here
```

### Custom RPC URLs
To use custom RPC URLs, add the following to your `.env` file:
```env
BSC_PROVIDER_URL=https://your-custom-bsc-rpc-url
OPBNB_PROVIDER_URL=https://your-custom-opbnb-rpc-url
```

## Integration
The **Wallet Provider** initializes with BSC as the default. It provides the context of the currently connected address and its balance, and creates Public and Wallet clients to interact with the supported chains.

## Example Usage
```bash
Get the USDC balance of 0x1234567890 on BSC.
Transfer 1 BNB to 0xRecipient on BSC.
Swap 1 BNB to USDC on BSC.
Bridge 1 BNB from BSC to opBNB.
Deposit 1 BNB to Lista Dao.
Get some testnet USDC from the faucet.
```

## Contribution
The plugin contains tests. Navigate to the `plugin-bnb` directory and run:
```bash
bun test
```
````

## File: summaries/plugins/bootstrap.md
````markdown
# @elizaos/plugin-bootstrap

## Purpose
A plugin providing core functionality and basic actions for ElizaOS agents, enabling fundamental agent behaviors including conversation management, room interactions, and fact tracking.

## Key Features
- Conversation Management: NONE, CONTINUE, IGNORE actions and flow control
- Room Control: Follow/Unfollow, Mute/Unmute functionalities
- Fact Management: Extraction, categorization, deduplication
- Goal Tracking: Progress monitoring and status updates

## Installation
```bash
bun install @elizaos/plugin-bootstrap
```

## Integration
The Bootstrap plugin provides essential actions and evaluators that form the foundation of agent interactions within ElizaOS.

## Development
```bash
bun install
bun run build
bun run lint
```

## Dependencies
- @elizaos/core: workspace:*
````

## File: summaries/plugins/browser.md
````markdown
# @elizaos/plugin-browser

## Purpose
Browser automation plugin for Eliza OS that provides web scraping and browser automation capabilities using Playwright.

## Key Features
- Browser Automation: Web scraping and content extraction with Playwright
- Multiple Browser Support: Works with Chromium, Firefox, and WebKit
- Headless Mode: Support for both headless and headed browser operations
- Page Interaction: Automated form filling, clicking, and navigation
- Content Extraction: HTML parsing and data extraction
- Screenshot Capture: Page and element screenshot capabilities
- Network Handling: Request interception and network monitoring

## Installation
```bash
npm install @elizaos/plugin-browser
```

## Configuration
The plugin may require environment variables:
```env
CAPSOLVER_API_KEY=your_capsolver_api_key  # Optional: For CAPTCHA solving capabilities
```

## Integration
```typescript
import { createBrowserPlugin } from '@elizaos/plugin-browser';

// Initialize the plugin
const browserPlugin = createBrowserPlugin();

// Register with Eliza OS
elizaos.registerPlugin(browserPlugin);
```

## Example Usage
The BrowserService provides:
- Page navigation and interaction
- Form filling and submission
- Content extraction and parsing
- Screenshot capture
- Network request handling
- CAPTCHA solving (with appropriate configuration)
````

## File: summaries/plugins/cache-redis.md
````markdown
# Unmaintained: this cache plugin originally lived in @elizaos/core. It needs a maintainer.

## Purpose
This cache plugin originally lived in @elizaos/core.

## Integration
Originally part of @elizaos/core but now separated.

## Note
Needs a maintainer.
````

## File: summaries/plugins/ccxt.md
````markdown
# @elizaos/plugin-ccxt

## Purpose
A plugin for Eliza OS that enables cryptocurrency trading and arbitrage using the CCXT library.

## Key Features
- Check balance of assets across multiple configured exchanges
- Place market and limit buy/sell orders
- Identify arbitrage opportunities between different exchanges

## Installation
```bash
npm install @elizaos/plugin-ccxt
```

## Configuration
Get your API keys from your preferred cryptocurrency exchanges.

Set up your environment variables:
```bash
CCXT_<EXCHANGE>_API_KEY=your_api_key
CCXT_<EXCHANGE>_API_SECRET=your_api_secret
```

Example:
```bash
CCXT_BINANCE_API_KEY=your_binance_api_key
CCXT_BINANCE_API_SECRET=your_binance_api_secret

CCXT_BYBIT_API_KEY=your_bybit_api_key
CCXT_BYBIT_API_SECRET=your_bybit_api_secret
```

## Integration
Available Actions:
- checkbalance: Retrieves the current balance of your assets from a specified exchange
- placeorder: Places a market or limit buy/sell order on a specified exchange
- getarbitrageopportunity: Analyzes price differences across exchanges to identify profitable trades

## Links
- [CCXT DOCUMENTATION](https://docs.ccxt.com/)
````

## File: summaries/plugins/chainbase.md
````markdown
# Chainbase Plugin for Eliza

## Purpose
Bridges the gap between on-chain data and AI agents, enabling natural language interactions with blockchain data across multiple networks.

## Key Features
- Multi-chain Data Access
- Natural Language Processing
- Real-time Data

## Configuration
To use this plugin, you'll need a Chainbase API key:
1. Visit Chainbase Platform to create an account
2. Obtain a free API key from your dashboard
3. Set your API key as the `CHAINBASE_API_KEY` environment variable

For testing, you can use the API key "demo" for basic functionality.

## Integration
Serves as an interface between Eliza AI agents and blockchain data, allowing users to query and analyze on-chain information using natural language.

## Example Usage
```plaintext
Query: "query onchain data: This address 0x8308964da9ed5d2e8012023d7c7ef02f9e6438c7 which tokens on Ethereum are held"
```

## Links
[Chainbase API Documentation](https://docs.chainbase.com/api-reference/overview)
````

## File: summaries/plugins/coinbase.md
````markdown
# @elizaos/plugin-coinbase

## Purpose
A comprehensive Coinbase integration plugin for ElizaOS that provides access to Coinbase's various APIs and services.

## Key Features
- Commerce Integration: Create and manage payment charges using Coinbase Commerce
- Trading: Execute trades and swaps between different assets
- Token Contract Management: Deploy and interact with ERC20, ERC721, and ERC1155 smart contracts
- Mass Payments: Process bulk transfers and payments to multiple addresses
- Advanced Trading: Access to Coinbase Advanced Trading API features
- Webhook Management: Create and manage webhooks for various blockchain events

## Installation
```bash
npm install @elizaos/plugin-coinbase
```

## Configuration
The plugin requires several environment variables:
```env
COINBASE_API_KEY=your_api_key
COINBASE_PRIVATE_KEY=your_private_key
COINBASE_COMMERCE_KEY=your_commerce_key
COINBASE_NOTIFICATION_URI=your_webhook_notification_uri
```

## Integration
The plugin provides multiple sub-plugins that can be registered with ElizaOS runtime:
```typescript
import { plugins } from '@elizaos/plugin-coinbase';

// Register all plugins
const {
  coinbaseMassPaymentsPlugin,
  coinbaseCommercePlugin,
  tradePlugin,
  tokenContractPlugin,
  webhookPlugin,
  advancedTradePlugin,
} = plugins;

// Register individual plugins as needed
runtime.registerPlugin(coinbaseCommercePlugin);
runtime.registerPlugin(tradePlugin);
// etc...
```

## Links
- [Coinbase API Documentation](https://docs.cloud.coinbase.com/)
- [Commerce API Reference](https://docs.cloud.coinbase.com/commerce/reference/)
- [Advanced Trade Documentation](https://docs.cloud.coinbase.com/advanced-trade-api/)
- [Coinbase Prime Documentation](https://docs.prime.coinbase.com/)
````

## File: summaries/plugins/coingecko.md
````markdown
# Plugin CoinGecko

## Purpose
A plugin for fetching cryptocurrency price data from the CoinGecko API.

## Installation
```bash
bun add @elizaos/plugin-coingecko
```

## Configuration
Set up your environment with the required CoinGecko API key:

| Variable Name           | Description                |
| ----------------------- | -------------------------- |
| `COINGECKO_API_KEY`     | Your CoinGecko Pro API key |
| `COINGECKO_PRO_API_KEY` | Your CoinGecko Pro API key |

## Integration
The plugin integrates with CoinGecko's API to fetch current prices, market data, trending coins, and top gainers/losers for various cryptocurrencies in different fiat currencies.

## Example Usage
```typescript
import { coingeckoPlugin } from '@elizaos/plugin-coingecko';

// Initialize the plugin
const plugin = coingeckoPlugin;
```

## Links
[CoinGecko Pro API](https://docs.coingecko.com/reference/introduction)
````

## File: summaries/plugins/coinmarketcap.md
````markdown
# @elizaos/plugin-coinmarketcap

## Purpose
A plugin for Eliza that enables cryptocurrency price checking using the CoinMarketCap API.

## Key Features
- Real-time cryptocurrency price checking
- Support for multiple cryptocurrencies (BTC, ETH, SOL, etc.)
- Currency conversion (USD, EUR, etc.)
- Detailed price and market data
- Natural language processing for price queries

## Installation
```bash
npm install @elizaos/plugin-coinmarketcap
```

## Configuration
1. Get your API key from [CoinMarketCap](https://pro.coinmarketcap.com)
2. Set up environment variables: `COINMARKETCAP_API_KEY=your_api_key`
3. Register the plugin in your Eliza configuration

## Integration
The plugin responds to natural language queries about cryptocurrency prices, providing detailed price and market data.

## Example Usage
```plaintext
"What's the current price of Bitcoin?"
"Show me ETH price in USD"
"Get the price of SOL"
```

## Links
- [CoinMarketCap API Documentation](https://coinmarketcap.com/api/documentation/v1/)
- [GitHub Repository](https://github.com/elizaos/eliza/tree/main/packages/plugin-coinmarketcap)
````

## File: summaries/plugins/compass.md
````markdown
# @elizaos-plugins/plugin-compass

## Purpose
A plugin that integrates the Compass API into the ElizaOS ecosystem to execute operations on DeFi protocols.

## Key Features
- Leverages the `@compass-labs/sdk` TypeScript SDK
- Provides actions corresponding to Compass API endpoints and schemas

## Installation
```
npx elizaos plugins add @elizaos-plugins/plugin-compass
bun run build
```

## Configuration
Required environment variables:
- COMPASS_WALLET_PRIVATE_KEY
- COMPASS_ARBITRUM_RPC_URL
- COMPASS_ETHEREUM_RPC_URL
- COMPASS_BASE_RPC_URL

These can also be set directly in the character configuration under settings.secrets.

## Integration
Added to the character configuration in the "plugins" array as "@elizaos-plugins/plugin-compass".

## Links
- [Compass API](https://api.compasslabs.ai/)
- [Compass SDK](https://www.npmjs.com/package/@compass-labs/sdk)
````

## File: summaries/plugins/conflux.md
````markdown
# @elizaos/plugin-conflux

## Purpose
A plugin for interacting with the Conflux blockchain network within the ElizaOS ecosystem, enabling seamless interaction with both Conflux Core Space and eSpace networks.

## Key Features
- Token transfers in Conflux Core Space
- Cross-space bridge operations
- ConfiPump token management (creation, buying, and selling)

## Installation
```bash
bun install @elizaos/plugin-conflux
```

## Configuration
The plugin requires these environment variables:
```typescript
CONFLUX_CORE_PRIVATE_KEY=<Your Conflux Core Space private key>
CONFLUX_CORE_SPACE_RPC_URL=<Conflux Core Space RPC endpoint>
CONFLUX_MEME_CONTRACT_ADDRESS=<ConfiPump contract address>
```

## Integration
```typescript
import { confluxPlugin } from '@elizaos/plugin-conflux';
```

## Example Usage
```typescript
// Core Space Transfer
'Send 1 CFX to cfx:aaejuaaaaaaaaaaaaaaaaaaaaaaaaaaaa2eaeg85p5';

// Cross-Space Bridge Transfer
'Send 1 CFX to eSpace Address 0x119DA8bbe74B1C5c987D0c64D10eC1dB301d4752';

// ConfiPump Token Creation
'Create a new token called GLITCHIZA with symbol GLITCHIZA and generate a description about it';

// ConfiPump Token Trading
'Buy 0.00069 CFX worth of GLITCHIZA(0x1234567890abcdef)';
'Sell 0.00069 CFX worth of GLITCHIZA(0x1234567890abcdef)';
```

## Links
- [Conflux Documentation](https://developer.confluxnetwork.org/)
- [Conflux Portal](https://portal.confluxnetwork.org/)
- [ConfluxScan](https://confluxscan.io/)
- [Cross-Space Bridge](https://bridge.confluxnetwork.org/)
````

## File: summaries/plugins/cosmos.md
````markdown
# @elizaos/plugin-cosmos

## Purpose
Provides actions and utilities for interacting with Cosmos-compatible blockchains.

## Configuration
### Default Setup
- Required environment variables:
  ```
  COSMOS_RECOVERY_PHRASE=your recovery phrase words
  COSMOS_AVAILABLE_CHAINS=chain1,chain2,chain3
  ```
- Chain names must match identifiers from the chain-registry library

### Using the Cosmos Helper Character
- Pre-configured character optimized for Cosmos operations
- Handles repeated prompts effectively
- Requests confirmation before executing actions
- Usage: `--characters='../characters/cosmosHelper.character.json'`

### Custom Chain Configuration
- Custom chain data can be passed to `createCosmosPlugin`
- Must fulfill interfaces from `chain-registry`

## Actions
### Token Transfer
- Transfers tokens between addresses on Cosmos blockchains
- Requires confirmation for secure execution

### Token IBC Transfer
- Transfers tokens between different Cosmos-compatible blockchains
- Requires confirmation

### Token IBC Swap
- Swaps tokens between chains using Skip API
- Requires chains to be added to env file
- Handles special cases like multiple tokens with same symbol

## Development
- Environment setup requires configuration variables
- Run with `bun run dev`
- Testing: `bun test`

## Links
- [Skip API Documentation](https://docs.skip.build/)
````

## File: summaries/plugins/cronos.md
````markdown
# @elizaos/plugin-cronos

## Purpose
Cronos plugin for Eliza, extending the EVM plugin functionality.

## Key Features
- All standard EVM functionality inherited from @elizaos/plugin-evm
- Preconfigured for both Cronos Mainnet and Testnet
- Native CRO/TCRO token support
- Automated token transfer actions
- Balance checking functionality
- Built-in chain configuration

## Installation
```bash
bun add @elizaos/plugin-cronos
```

## Configuration
Required environment variable:
```env
CRONOS_PRIVATE_KEY=0x...  # Must start with 0x
```

## Integration
Supports Cronos Mainnet (Chain ID: 25) and Testnet (Chain ID: 338) through the settings.chains.evm configuration with options "cronos" and "cronosTestnet".

## Example Usage
```typescript
import { cronosPlugin } from '@elizaos/plugin-cronos';

// Use the plugin in your Eliza configuration
const config = {
  plugins: [cronosPlugin],
  // ... rest of your config
};
```

## Links
- Mainnet RPC: https://evm.cronos.org/
- Mainnet Explorer: https://explorer.cronos.org/
- Testnet RPC: https://evm-t3.cronos.org/
- Testnet Explorer: https://cronos.org/explorer/testnet3
````

## File: summaries/plugins/cronoszkevm.md
````markdown
# @elizaos/plugin-cronoszkevm

## Purpose
A plugin for interacting with the Cronos zkEVM network within the ElizaOS ecosystem, enabling seamless token transfers including ZKCRO, USDC, and ETH.

## Installation
```bash
bun install @elizaos/plugin-cronoszkevm
```

## Configuration
Requires environment variables:
```typescript
CRONOSZKEVM_ADDRESS=<Your Cronos zkEVM wallet address>
CRONOSZKEVM_PRIVATE_KEY=<Your Cronos zkEVM private key>
```

## Integration
```typescript
import { cronosZkEVMPlugin } from '@elizaos/plugin-cronoszkevm';
```

## Example Usage
```typescript
// Send USDC tokens
'Send 100 USDC to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62';

// Send ZKCRO tokens
'Send 100 ZKCRO to 0xbD8679cf79137042214fA4239b02F4022208EE82';

// Send ETH tokens
'Transfer 1 ETH to 0x123...';
```

## Links
- [Cronos zkEVM Documentation](https://docs.cronos.org/zkevm/)
- [zkEVM Bridge](https://zkevm.cronos.org/bridge)
- [Cronos Developer Portal](https://cronos.org/developers)
- [zkSync Integration Guide](https://docs.cronos.org/zkevm/integration)
````

## File: summaries/plugins/d-a-t-a.md
````markdown
# @elizaos-plugins/plugin-d.a.t.a

## Purpose
A Data Authentication, Trust, and Attestation framework plugin from CARV that enhances the Eliza Agent Framework with powerful data processing capabilities, enabling agents to analyze, transform, and derive insights from various data sources.

## Key Features
- Comprehensive Data Processing: Transform raw data into actionable insights through advanced analysis techniques
- Flexible Data Handling: Support for multiple data formats and sources, from CSV to JSON and APIs
- Intelligent Analysis: Leverage statistical methods and machine learning techniques for deeper understanding

## Integration
Integrates with the Eliza Agent Framework to empower AI agents with sophisticated data analysis capabilities.

## Use Cases
- On-chain stats fetching
- Token info
- On-chain address tracking (CARV ID required)

## Example Usage
Users can query token information such as AAVE, receiving detailed data about the token's category, platforms it's deployed on, and other relevant information through the plugin's data retrieval capabilities.
````

## File: summaries/plugins/dcap.md
````markdown
# @elizaos/plugin-dcap

## Purpose
A plugin for verifying DCAP attestation on-chain built based on the automata-dcap-attestation.

## Key Features
- Generate DCAP attestation on TDX using the `remoteAttestationProvider` from plugin-tee
- Generate DCAP attestation on SGX using the `sgxAttestationProvider` from plugin-sgx
- Submit and verify DCAP attestation on-chain

## Installation
```bash
bun install @elizaos/plugin-dcap
```

## Configuration
1. Set up environment variables:
```env
EVM_PRIVATE_KEY=your-private-key-here
DCAP_MODE=PLUGIN-SGX|PLUGIN-TEE|MOCK
```

2. Register the plugin:
```typescript
import { dcapPlugin } from '@elizaos/plugin-dcap';

// In your Eliza configuration
plugins: [
  dcapPlugin,
  // ... other plugins
];
```

## Integration
The plugin provides an action `dcapOnChainVerifyAction` triggered by natural language phrases like "Verify the DCAP attestation on-chain" or the keyword "DCAP_ON_CHAIN".

## Credits
- Automata Network: Provided on-chain DCAP verification
- Phala Network: Provided TDX environment support and plugin-tee
- Gramine: Provided SGX environment support
````

## File: summaries/plugins/depin.md
````markdown
# @elizaos/plugin-depin

## Purpose
Empowers the Eliza Agent Framework with Perception and Action capabilities via Decentralized Physical Infrastructure Networks (DePINs), bridging digital AI intelligence with the physical world.

## Key Features
1. Seamless IoTeX Integration: Leverages IoTeX Modular Infra to connect to DePIN networks
2. Unified Data Access: Standardized interfaces for diverse DePIN data sources
3. Time-Series Data Handling: Equipped to analyze temporal patterns
4. Future-Proof Design: Designed to scale with evolving DePIN and AI landscape

## Configuration
### Environment Variables
```env
SENTAI_API_KEY=your-sentai-api-key
```

### Character Configuration
```json
"plugins": [
    "@elizaos/plugin-depin"
]
```

## Integration
Serves as a critical component for Eliza agents to become sentient systems by enabling them to:
- Perceive: Access sensory data streams from devices across decentralized networks
- Act: Influence and control connected devices in real-time
- Learn: Build predictive models using continuous feedback from real-world data sources

## Example Usage
### DePIN Projects
- Token metrics queries
- Project comparisons
- Filtering by categories or blockchain platforms
- Device and revenue analysis
- In-depth queries about specific projects

### Sentient AI
- Real-time weather updates (supported by Nubila)
- Forecast analysis (supported by Nubila)
- Additional actions based on DePIN data (future development)
````

## File: summaries/plugins/desk-exchange.md
````markdown
# DESK Exchange Plugin for Eliza

## Purpose
Enables interaction with the DESK Perpetual DEX through Eliza, providing perpetual futures trading capabilities.

## Key Features
- Perpetual Trading (market and limit orders)
- Order Management (cancel all open orders)
- Account summary (view open orders, active positions, collateral balances)

## Installation
Add the plugin to your Eliza configuration:
```json
{
  "plugins": ["@elizaos/plugin-desk-exchange"]
}
```

## Configuration
Set the following environment variables:
```env
DESK_EXCHANGE_PRIVATE_KEY=your_private_key  # Required for trading and cancelling orders
DESK_EXCHANGE_NETWORK=                      # "mainnet" or "testnet
```

## Integration
Provides three actions to interact with DESK Exchange:
1. PERP_TRADE - Place market or limit orders
2. CANCEL_ORDERS - Cancel all open orders
3. GET_PERP_ACCOUNT_SUMMARY - Display account summary with positions, orders and collaterals

## Links
[DESK Exchange](https://desk.exchange/)
````

## File: summaries/plugins/devin.md
````markdown
# @elizaos/plugin-devin

## Purpose
Devin API integration plugin for Eliza, providing automated engineering assistance through the Devin API.

## Installation
```bash
bun add @elizaos/plugin-devin
```

## Configuration
The plugin requires a Devin API token for authentication. Set the following environment variable:

```bash
DEVIN_API_TOKEN=your_api_token_here
```

Or configure it in your Eliza runtime settings:

```typescript
runtime.setSetting('DEVIN_API_TOKEN', 'your_api_token_here');
```

## Key Features
- Session Management: Create and manage Devin engineering sessions
- State Tracking: Monitor session status and progress
- Client Agnostic: Works with any Eliza client implementation
- Rate Limiting: Built-in API request rate limiting
- Error Handling: Comprehensive error handling with retries

## Example Usage
### Actions
```typescript
const result = await runtime.runAction('START_DEVIN_SESSION', {
  content: { text: 'Help me refactor this code' },
});
```

### Providers
```typescript
const state = await runtime.getState();
const devinState = state.devin;

// Access session details
console.log(devinState.sessionId);
console.log(devinState.status);
console.log(devinState.url);
```

## Links
- [Devin API Integration Guide](https://docs.devin.ai/tutorials/api-integration)
- [External API Reference](https://docs.devin.ai/external-api/)
````

## File: summaries/plugins/dexscreener.md
````markdown
# @elizaos/plugin-dexscreener

## Purpose
A plugin for accessing DexScreener's token data and price information through your Eliza agent.

## Installation
```bash
bun add @elizaos/plugin-dexscreener
```

## Configuration
```typescript
import { dexScreenerPlugin } from '@elizaos/plugin-dexscreener';

const character = {
  plugins: [dexScreenerPlugin],
};
```

## Key Features
- Token Price Checking: Query token prices using addresses or symbols
- Token Trends: View latest and trending tokens

## Integration
The plugin provides:
- GET_TOKEN_PRICE (with aliases)
- GET_LATEST_TOKENS (with aliases)
- GET_LATEST_BOOSTED_TOKENS (with aliases)
- GET_TOP_BOOSTED_TOKENS (with aliases)
- TokenPriceProvider: Provides token price data from DexScreener API
- TokenPriceEvaluator: Evaluates messages for token price requests

## Example Usage
```plaintext
"What's the price of ETH?"
"Check price of 0x1234..."
"How much is $BTC worth?"
"Show me the latest tokens"
"What are the new boosted tokens?"
"Show me the top boosted tokens"
```
````

## File: summaries/plugins/di.md
````markdown
# @elizaos/plugin-di - Dependency Injection Plugin for Eliza

## Purpose
This plugin provides a dependency injection system for Eliza plugins, enabling decoupling of components for more modular and testable code.

## Key Features
- Dependency injection for actions, evaluators, providers, services, and clients
- Decorators: @injectable, @inject (from inversify), and @property
- Abstract classes: BaseInjectableAction and BaseInjectableEvaluator

## Integration
Uses the inversify library to provide the dependency injection system. Components must be registered with the global container before injection, either as singletons or request-scoped instances.

## Example Usage
Examples are available in the _examples/plugin-with-di/ folder, demonstrating DI in actions, evaluators, providers, and services.

## Links
Documentation references examples at: ../_examples/plugin-with-di/
````

## File: summaries/plugins/dkg.md
````markdown
# @elizaos/plugin-dkg

## Purpose
A plugin enabling integration with the OriginTrail Decentralized Knowledge Graph (DKG) for enhanced search and knowledge management capabilities in ElizaOS agents.

## Key Features
- DKG Integration: Perform SPARQL queries on the DKG and combine with Eliza's search results
- Knowledge Asset Creation: Automatically generate and publish memory as Knowledge Assets to the DKG
- DKG Search Provider: Executes SPARQL queries and integrates data with Eliza's response system
- Memory Creation Plugin: Creates Knowledge Assets from agent interactions

## Installation
```bash
bun install @elizaos/plugin-dkg
```

## Configuration
- Set environment variables by copying .env.example to .env
- Fill in node information, LLM key, and Twitter credentials
- Customize DKG Knowledge Asset & Query Templates in plugin-dkg/constants.ts

## Integration
Extends ElizaOS by allowing agents to interact with the OriginTrail DKG, enhancing responses with decentralized knowledge and creating memory assets on the DKG after responses.

## Example Usage
```bash
bun start --characters="characters/chatdkg.character.json"
```

## Dependencies
- @elizaos/core: workspace:*
- SPARQL query library: workspace:*
- DKG JavaScript SDK: dkg.js > ^8.0.4
````

## File: summaries/plugins/echochambers.md
````markdown
# @elizaos/plugin-echochambers

## Purpose
The EchoChambers plugin enables ELIZA to interact in chat rooms, providing conversational capabilities with dynamic interaction handling.

## Key Features
- Join and monitor chat rooms
- Respond to messages based on context and relevance
- Retry operations with exponential backoff
- Manage connection and reconnection logic
- Real-time chat room monitoring and interaction
- Intelligent message response generation
- Context-aware conversation handling
- Comprehensive message history tracking
- Multi-room support with configurable polling

## Installation
1. Install the package:
```bash
bun install @elizaos/plugin-echochambers
```

2. Import and register the plugin in your `character.ts` configuration:
```typescript
import { Character, ModelProviderName, defaultCharacter } from "@elizaos/core";
import { echoChambersPlugin } from "@elizaos/plugin-echochambers";

export const character: Character = {
  ...defaultCharacter,
  name: "Eliza",
  plugins: [echoChambersPlugin],
  // additional configuration
};
```

## Configuration
Environment variables:
```plaintext
# Required Settings
ECHOCHAMBERS_API_URL="http://127.0.0.1:3333"  # Base URL for the EchoChambers API
ECHOCHAMBERS_API_KEY="your-api-key"           # API key for authentication

# Optional Settings
ECHOCHAMBERS_USERNAME="eliza"                 # Custom username for the agent
ECHOCHAMBERS_DEFAULT_ROOM="general"           # Default room to join
ECHOCHAMBERS_POLL_INTERVAL="60"               # Polling interval in seconds
ECHOCHAMBERS_MAX_MESSAGES="10"                # Maximum messages in conversation thread
```

## Integration
The plugin automatically initializes when included in character configuration, handling room connections, message processing, and response generation based on context and relevance.
````

## File: summaries/plugins/edwin.md
````markdown
# @elizaos/plugin-edwin

## Purpose
Edwin plugin for Eliza that enables interaction with Edwin tools for DeFi operations.

## Installation
```bash
bun install
```

## Configuration
Configure environment variables for chains you want to support:
```env
EVM_PRIVATE_KEY=<YOUR_EVM_PRIVATE_KEY>
SOLANA_PRIVATE_KEY=<YOUR_SOLANA_PRIVATE_KEY>
```

## Integration
The plugin provides access to the following Edwin tools:
- supply
- withdraw
- stake
- addLiquidity
- removeLiquidity

## Example Usage
1. Supply on AAVE:
```
Supply 100 USDC to AAVE
```

2. Add liquidity on Meteora:
```
Find a meteora pool with high liquidity and add to td 10 USDC and 0.01 SOL.
```

## Links
[Edwin docs](https://docs.edwin.finance)
````

## File: summaries/plugins/eliza-nkn.md
````markdown
# plugin-nkn

## Purpose
Integrates NKN to enable communication between multiple AI agents or users within the Eliza framework.

## Key Features
- Supports sending and receiving messages via a decentralized network
- Ensures low latency and secure transmission

## Integration
Leverages the NKN protocol to facilitate messaging and communication between various AI agents and users within ElizaOS.

## Links
https://nkn.org/
````

## File: summaries/plugins/email-automation.md
````markdown
# @elizaos/plugin-email-automation

## Purpose
AI-powered email automation plugin for Eliza that intelligently detects email-worthy conversations and handles generation/delivery.

## Key Features
1. Intelligent Detection
   - Partnership opportunity detection
   - Technical discussion recognition
   - Business proposal identification
   - Follow-up requirement analysis

2. AI-Powered Generation
   - Structured email formatting
   - Context-aware content
   - Professional tone maintenance
   - Technical detail inclusion

## Configuration
```typescript
# Required
RESEND_API_KEY=           # Your Resend API key
DEFAULT_TO_EMAIL=         # Default recipient
DEFAULT_FROM_EMAIL=       # Default sender

# Optional Settings
EMAIL_AUTOMATION_ENABLED=true    # Enable AI detection
EMAIL_EVALUATION_PROMPT=        # Custom detection criteria for shouldEmail
```

## Integration
```typescript
import { emailAutomationPlugin } from '@elizaos/plugin-email-automation';

// Add to your Eliza configuration
{
    plugins: [emailAutomationPlugin],
    settings: {
        EMAIL_AUTOMATION_ENABLED: true,
        // ... other settings
    }
}
```

## Development
```bash
# Installation
bun install

# Testing
bun test
bun test:watch
bun test:coverage

# Building
bun build
```

## Links
- [Resend Documentation](https://resend.com/docs)
- [Email API Reference](https://resend.com/docs/api-reference/introduction)
- [Developer Portal](https://resend.com/overview)
````

## File: summaries/plugins/email.md
````markdown
# Email Plugin

## Purpose
Implementation of an EmailClient for Eliza.

## Configuration
### SMTP Section
- `EMAIL_OUTGOING_SERVICE`: "smtp" | "gmail"
- `EMAIL_OUTGOING_HOST`: SMTP Hostname or IP (required for "smtp" service)
- `EMAIL_OUTGOING_PORT`: Port to connect to (defaults: 465 for secure, 587 otherwise)
- `EMAIL_SECURE`: If true uses TLS, otherwise uses TLS if server supports STARTTLS
- `EMAIL_OUTGOING_USER`: Username
- `EMAIL_OUTGOING_PASS`: Password

### IMAP Section
- `EMAIL_INCOMING_SERVICE`: "imap"
- `EMAIL_INCOMING_HOST`: IMAP Hostname or IP
- `EMAIL_INCOMING_PORT`: Port to connect to (defaults: 993)
- `EMAIL_INCOMING_USER`: Username
- `EMAIL_INCOMING_PASS`: Password

## Installation
```
bun add @elizaos/plugin-email
```

## Integration
Connects with ElizaOS through the runtime.clients.email interface.

## Example Usage
```
this.runtime.clients.email.send({
    to: "recipient@example.com",
    subject: "Your Subject Here",
    text: "Your email body here."
});

this.runtime.clients.email.receive((email) => {
    console.log("Email Received:", email);
});
```

## Links
https://support.google.com/mail/answer/185833?hl=en
````

## File: summaries/plugins/ethstorage.md
````markdown
# @elizaos/plugin-ethstorage

## Purpose
This plugin allows interaction with the EthStorage decentralized storage network using Eliza.

## Key Features
- Transfer QKC tokens from agent's wallet to another wallet
- Submit arbitrary data to the EthStorage decentralized storage network

## Configuration
- ETHSTORAGE_ADDRESS: Entry contract address for storing data (default: beta testnet)
- ETHSTORAGE_RPC_URL: RPC endpoint for connecting to desired network (default: beta testnet)
- ETHSTORAGE_PRIVATE_KEY: Private key for the agent's wallet

## Integration
The plugin provides two actions that integrate with ElizaOS:
- SEND_TOKEN: Transfers QKC tokens between wallets
- SUBMIT_DATA: Submits data to EthStorage using a specified key

## Example Usage
- Transfer: "Send 100 QKC to 0x341Cb1a94ef69499F97E93c41707B21326C0Cc87"
- Submit Data: "Submit the following data using key 'my_key' to EthStorage 'Hello World!'"

## Links
- [EthStorage Documentation](https://docs.ethstorage.io/)
- [Learn more about EthStorage](https://ethstorage.io/)
- [Awesome EthStorage Repo](https://github.com/ethstorage/)
````

## File: summaries/plugins/evm.md
````markdown
# @elizaos/plugin-evm

## Purpose
Provides actions and providers for interacting with EVM-compatible chains, including token transfers, cross-chain bridging, and token swaps using LiFi integration.

## Key Features
- Multi-chain support with dynamic chain configuration
- Native token transfers
- Cross-chain token bridging via LiFi
- Token swapping on supported DEXs
- Wallet balance tracking
- Custom RPC endpoint configuration
- Automatic retry mechanisms
- Comprehensive transaction management

## Installation
```bash
bun install @elizaos/plugin-evm
```

## Configuration
### Required Environment Variables:
```env
# Required
EVM_PRIVATE_KEY=your-private-key-here

# Optional - Custom RPC URLs
EVM_PROVIDER_URL=https://your-custom-mainnet-rpc-url
ETHEREUM_PROVIDER_<CHAIN_NAME>=https://your-custom-rpc-url
```

Chain Configuration in character config:
```json
"settings": {
    "chains": {
        "evm": [
            "base", "arbitrum", "iotex"
        ]
    }
}
```

## Integration
The Wallet Provider initializes with the first chain in the list as default (or Ethereum mainnet if none added). It provides context of the currently connected address and balance, creates Public and Wallet clients, and allows adding chains dynamically.

## Example Usage
```typescript
// Transfer native tokens
Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e

// Bridge tokens between chains
Bridge 1 ETH from Ethereum to Base

// Swap tokens on same chain
Swap 1 ETH for USDC on Base

// Governance actions
Propose a proposal to the 0xdeadbeef00000000000000000000000000000000 governor on Ethereum to transfer 1 ETH to 0xRecipient.
```
````

## File: summaries/plugins/ferePro.md
````markdown
# @elizaos/plugin-ferepro

## Purpose
A plugin for enabling WebSocket communication with FerePro API to provide AI-driven market insights within the ElizaOS ecosystem.

## Key Features
- Real-time WebSocket communication
- Streaming and non-streaming response support
- Market data analysis and comparisons
- Cryptocurrency insights
- Debug mode for detailed responses
- Automatic connection management
- Comprehensive error handling
- Credit tracking and management

## Installation
```bash
bun install @elizaos/plugin-ferepro
```

## Configuration
### Required Environment Variables
- FEREAI_USER_ID: FereAI User ID
- FEREAI_API_KEY: FereAI API key
- REQUEST_TIMEOUT (Optional): Number of milliseconds before a request times out

## Integration
The plugin enables real-time communication with the FerePro API through WebSocket connections within the ElizaOS ecosystem.

## Example Usage
```typescript
// Get top cryptocurrencies
'What are the top 5 cryptocurrencies?';

// Compare specific cryptocurrencies
'Compare Ethereum and Bitcoin for the past 6 months';

// Get historical performance
'Compare top 3 coins against Bitcoin in the last 3 months';
```

## Links
- [FereAI Website](https://www.fereai.xyz/)
- [FereAI Agents Documentation](https://docs.fereai.xyz/docs/product/ai-versions)
````

## File: summaries/plugins/firecrawl.md
````markdown
# Firecrawl Plugin

## Purpose
A service wrapper for the Firecrawl API that provides web scraping and crawling functionality.

## Key Features
- Service Factory: Creates a service instance with API key
- Web Scraping (getScrapeData): Fetches content from a single webpage
- Web Searching (getSearchData): Searches for data based on conversations

## Configuration
Add to your character file:
```json
{
  "FIRECRAWL_API_KEY": "your-api-key-here"
}
```

## Example Usage
### Web Scraping
- "Can you scrape the content from https://example.com?"
- "Get the data from www.example.com/page"

### Web Search
- "Find the latest news about SpaceX launches"
- "Can you find details about the iPhone 16 release?"

## Actions
- FIRECRAWL_GET_SCRAPED_DATA: For single-page content extraction
- WEB_SEARCH: Web search for any data
````

## File: summaries/plugins/flow-advanced.md
````markdown
# @elizaos-plugins/plugin-flow-advanced

## Purpose
This plugin provides advanced functionality for the Flow Blockchain.

## Key Features
- Accounts management based on Account Linking feature
- Token Price Query for any token on Flow Blockchain
- Token Transfer from User's account to others' address
- Token Registeration for any token on Flow Blockchain

## Installation
```bash
npx elizaos plugins add @elizaos-plugins/plugin-di
npx elizaos plugins add @elizaos-plugins/plugin-flow
npx elizaos plugins add @elizaos-plugins/plugin-flow-advanced
```

## Configuration
Environment variables:
```typescript
FLOW_ADDRESS=<Flow wallet address starting with 0x>
FLOW_PRIVATE_KEY=<Private key for the Flow wallet starting with 0x>
FLOW_NETWORK=<Network to connect to: "mainnet", "testnet", or "emulator" (optional, defaults to "mainnet")>
FLOW_ENDPOINT_URL=<Custom RPC endpoint URL (optional)>
```

## Integration
```typescript
import { advancedFlowPlugin } from '@elizaos-plugins/plugin-flow-advanced';
```

## Example Usage
```typescript
'Send 5 FLOW to 0xa51d7fe9e0080662';
'Send 1 FLOW - A.1654653399040a61.FlowToken to 0xa2de93114bae3e73';
'Send 1000 FROTH - 0xb73bf8e6a4477a952e0338e6cc00cc0ce5ad04ba to 0x000000000000000000000002e44fbfbd00395de5';
```
````

## File: summaries/plugins/flow.md
````markdown
# @elizaos/plugin-flow

## Purpose
A plugin for interacting with the Flow blockchain within the ElizaOS ecosystem, providing functionality for native FLOW token transfers, fungible token transfers, and EVM token interactions.

## Installation
```bash
bun install @elizaos/plugin-flow
```

## Configuration
The plugin requires environment variables:
```typescript
FLOW_ADDRESS=<Flow wallet address starting with 0x>
FLOW_PRIVATE_KEY=<Private key for the Flow wallet starting with 0x>
FLOW_NETWORK=<Network to connect to: "mainnet", "testnet", or "emulator" (optional, defaults to "mainnet")>
FLOW_ENDPOINT_URL=<Custom RPC endpoint URL (optional)>
```

## Integration
```typescript
import { flowPlugin } from '@elizaos/plugin-flow';
```

## Example Usage
```typescript
'Send 5 FLOW to 0xa51d7fe9e0080662';
'Send 1 FLOW - A.1654653399040a61.FlowToken to 0xa2de93114bae3e73';
'Send 1000 FROTH - 0xb73bf8e6a4477a952e0338e6cc00cc0ce5ad04ba to 0x000000000000000000000002e44fbfbd00395de5';
```

## Links
- [Flow Documentation](https://docs.onflow.org/)
- [Flow Developer Portal](https://developers.flow.com/)
- [Flow Block Explorer](https://flowscan.io/)
- [Cadence Documentation](https://docs.onflow.org/cadence/)
````

## File: summaries/plugins/football.md
````markdown
# @elizaos/plugin-football

## Purpose
A plugin providing live football match data and league standings integration for ElizaOS agents.

## Key Features
1. Live Match Data - Retrieves teams, scores, and game events with real-time updates
2. League Standings - Fetches team rankings, points, goals scored, and other statistics
3. Flexible Integration - Extendable for additional football data

## Installation
```bash
bun install @elizaos/plugin-football
```

## Configuration
Requires an API key from Football-Data.org, added to your `.env` file:
```env
FOOTBALL_API_KEY=your_api_key_here
```

## Integration
Provides actions (`fetchMatchAction` and `fetchStandingsAction`) that enable ElizaOS agents to access football data in conversations.

## Example Usage
```javascript
import { fetchMatchAction } from '@elizaos/plugin-football';

const result = await fetchMatchAction.handler(runtime, message, state);
console.log(result);
```

## Links
- [Football-Data.org API](https://www.football-data.org/)
- [Football-Data API Documentation](https://www.football-data.org/documentation/quickstart)
````

## File: summaries/plugins/form.md
````markdown
# @elizaos/plugin-form

## Purpose
A plugin for integrating Form chain capabilities within the ElizaOS ecosystem, providing direct access to curves-based token economics and ERC20 conversions.

## Key Features
- Buy and sell curves tokens
- Convert between curves and ERC20 tokens
- Manage token holdings
- Query prices and balances
- Create new ERC20 tokens for curves

## Installation
```bash
bun install @elizaos/plugin-form
```

## Configuration
### Environment Variables
```bash
FORM_PRIVATE_KEY=<Your Form chain wallet private key>
FORM_TESTNET=true  # Optional, defaults to false
```

### Plugin Setup
```typescript
// In your agent configuration
import { formPlugin } from '@elizaos/plugin-form';

const character = {
  plugins: [formPlugin],
  // ... other configuration
};
```

## Integration
The plugin integrates Form chain with Eliza, supporting both QUADRATIC and LOGRITHMIC formulas for different use cases and trading volumes.

## Example Usage
```typescript
await runtime.processAction('BUY_CURVES_TOKEN', {
  subject: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e',
  amount: 1,
  formula: 'QUADRATIC', // or "LOGRITHMIC" for high volume
});
```
````

## File: summaries/plugins/fuel.md
````markdown
# @elizaos/plugin-fuel

## Purpose
A plugin for interacting with the Fuel blockchain within the ElizaOS ecosystem, focusing on ETH transfers on the Fuel Ignition network.

## Installation
```bash
bun install @elizaos/plugin-fuel
```

## Configuration
```typescript
FUEL_PRIVATE_KEY=<Private key for the Fuel wallet starting with 0x>
FUEL_PROVIDER_URL=<Custom RPC endpoint URL (optional, defaults to "https://mainnet.fuel.network/v1/graphql")>
```

## Integration
Import the plugin: 
```typescript
import { fuelPlugin } from '@elizaos/plugin-fuel';
```

## Example Usage
```typescript
'Transfer 1 ETH to 0x8F8afB12402C9a4bD9678Bec363E51360142f8443FB171655eEd55dB298828D1';
```

## Links
- [Fuel Documentation](https://docs.fuel.network/)
- [Fuel Developer Portal](https://developers.fuel.network/)
- [Fuel Network Dashboard](https://app.fuel.network/)
- [Fuel GitHub Repository](https://github.com/FuelLabs)
````

## File: summaries/plugins/gelato.md
````markdown
# plugin-gelato

## Purpose
A powerful plugin to interact with smart contracts using Gelato Relay, supporting both ERC2771 (meta transactions) and non-ERC2771 calls on any EVM-compatible blockchain.

## Key Features
- Sponsored Calls: Interact with contracts without needing gas on the user's side
- ERC2771 Support: Execute meta-transactions via Gelato's sponsoredCallERC2771
- Customizable: Easily configure chains, contracts, and user-specific settings

## Installation
```
bun install elizaos/plugin-gelato
```

## Configuration
Fill out the `.env` file in the project root:
```
GELATO_RELAY_API_KEY=<Your Gelato Relay API Key>
EVM_PROVIDER_URL=<Your EVM provider URL (e.g., Alchemy or Infura endpoint)>
EVM_PRIVATE_KEY=<Your wallet's private key>
```

## Example Usage
- Non-ERC2771 (Standard Sponsored Call) to call increment() function
- ERC2771 (Meta-Transactions) to call increment() with user address
- Successful execution returns confirmation with task ID and tracking link

## Troubleshooting
- Ensure proper .env configuration
- Verify contract ABI, function name, and chain details
- For ERC2771 calls, confirm User address is correct
````

## File: summaries/plugins/genlayer.md
````markdown
# @elizaos/plugin-genlayer

## Purpose
A plugin for interacting with the GenLayer protocol, enabling contract deployment, interactions, and transaction management.

## Installation
```bash
bun add @elizaos/plugin-genlayer
```

## Configuration
### Required Environment Variables
```env
GENLAYER_PRIVATE_KEY=your_private_key     # Required: Must start with 0x
GENLAYER_RPC_URL=your_rpc_url            # Optional: Defaults to https://studio.genlayer.com:8443/api
```

## Integration
Add the plugin to your character configuration:
```typescript
import { genLayerPlugin } from '@elizaos/plugin-genlayer';

const character = {
  plugins: [genLayerPlugin],
};
```

## Key Features
- Read contract state
- Write to contracts
- Deploy new contracts
- Get contract schemas
- Transaction management (details, status, nonces, receipts)

## Example Usage
- READ_CONTRACT: "Read the GenLayer contract at 0xE2632... by calling get_have_coin"
- WRITE_CONTRACT: "Write to the contract at 0xE2632... by calling set_value with argument 42"
- DEPLOY_CONTRACT: "Deploy a new contract from /path/to/contract.py with argument 'true'"
- GET_TRANSACTION: "Get transaction details for hash 0x1234..."
- GET_CURRENT_NONCE: "Get current nonce for address 0xE2632..."
- WAIT_FOR_TRANSACTION_RECEIPT: "Wait for receipt of transaction 0x1234..."
- GET_CONTRACT_SCHEMA: "Get contract schema for address 0xE2632..."
````

## File: summaries/plugins/gigbot.md
````markdown
# Eliza GigBot Client

## Purpose
This package provides GigBot integration for the Eliza AI agent, enabling task automation and token earning.

## Key Features
- Task automation and management
- Interaction handling with GigBot API
- Token earning through task completions
- Approval workflow via Discord (optional)

## Configuration
Environment Variables:
- `GIGBOT_API_URL`: GigBot API endpoint (default: https://www.gigbot.xyz/api)
- `GIG_SEARCH_INTERVAL`: How often to search for new tasks (hours, default: 3)
- `GIG_ACTION_INTERVAL`: How often to perform task actions (hours, default: 12)
- `GIG_CLAIM_INTERVAL`: How often to claim completed tasks (hours, default: 24)
- `GIG_CLAIM_PLATFORM`: Platform to claim tasks from ('x' or 'farcaster', default: x)
- `EVM_PRIVATE_KEY`: Ethereum private key for claiming rewards (required)

## Integration
- Register the plugin with Eliza runtime
- Requires Twitter client initialization before GigBot
- Must pass existing clients to GigBot during initialization

## Example Usage
```typescript
import { GigBotClientInterface } from '@elizaos/gigbot';

const gigbotPlugin = {
  name: 'gigbot',
  description: 'GigBot client',
  clients: [GigBotClientInterface],
};

// Register with your Eliza runtime
runtime.registerPlugin(gigbotPlugin);
```
````

## File: summaries/plugins/giphy.md
````markdown
# Plugin Giphy

## Purpose
A plugin for sending GIFs in response to user messages.

## Key Features
Enables agent to respond with relevant GIFs based on user inputs using the Giphy API.

## Installation
```bash
bun add @elizaos/plugin-giphy
```

## Configuration
Set up your environment with a Giphy API key:

| Variable Name   | Description                               |
| --------------- | ----------------------------------------- |
| `GIPHY_API_KEY` | Giphy API key for authenticating requests |

## Integration
Provides the `SEND_GIF` action which automatically responds with a GIF based on the context of user messages.

## Example Usage
```typescript
import { giphyPlugin } from '@elizaos/plugin-giphy';

// Initialize the plugin
const plugin = giphyPlugin;

// Add the plugin to your agent's plugin list
const plugins = [
  giphyPlugin,
  // ... other plugins
];
```

## Links
[Giphy API](https://developers.giphy.com/)
[Giphy Developers](https://developers.giphy.com/)
````

## File: summaries/plugins/gitbook.md
````markdown
# @elizaos/plugin-gitbook

## Purpose
A plugin for querying and retrieving information from GitBook documentation within the ElizaOS ecosystem.

## Key Features
- Natural language queries for documentation content
- Intelligent query validation
- Keyword-based filtering
- Clean response formatting

## Installation
```bash
bun install @elizaos/plugin-gitbook
```

## Configuration
### Environment Variables
```typescript
GITBOOK_SPACE_ID=<Your GitBook Space ID>
```

### Client Configuration (Optional)
```json
{
  "name": "YourCharacter",
  "plugins": ["gitbook"],
  "settings": {
    "gitbook": {
      "keywords": {
        "projectTerms": ["term1", "term2"],
        "generalQueries": ["custom1", "custom2"]
      },
      "documentTriggers": ["docs", "documentation"]
    }
  }
}
```

## Integration
```typescript
import { gitbookPlugin } from '@elizaos/plugin-gitbook';
```

## Example Usage
```typescript
'How do I get started with the project?';
'What are the main features?';
'Explain how to configure the system';
```
````

## File: summaries/plugins/gitcoin-passport.md
````markdown
# `@elizaos/plugin-gitcoin-passport`

## Purpose
This plugin provides actions for interacting with Gitcoin passport.

## Installation
Add it under your character profile in plugins as:
```
    "plugins": [
        "@elizaos/plugin-gitcoin-passport"
    ],
```

## Configuration
1. Get API Key:
   - Log in at developer.passport.xyz with your wallet
   - Go to "API Keys" section
   - Click "+ Create a Key"
   - Store your API key securely

2. Get Scorer ID:
   - Go to "Scorer" section
   - Click "+ Create a Scorer" (use Unique Humanity scorer)
   - Find Scorer ID in page URL: https://developer.passport.xyz/dashboard/scorer/{scorer_id}

## Usage
Results are saved as messages and agents can retrieve them for different use cases. Default passport threshold of 20 is used, but custom values can be selected.

## Links
https://docs.passport.xyz/building-with-passport/passport-api/overview
````

## File: summaries/plugins/goat.md
````markdown
# @elizaos/plugin-goat

## Purpose
A plugin for integrating blockchain capabilities through the GOAT (Great Onchain Agent Toolkit) framework within the ElizaOS ecosystem.

## Key Features
- Blockchain interaction capabilities including wallets and token management
- Support for multiple chains and protocols
- Actions for sending and checking balances of ETH and USDC
- Token swapping using KIM protocol
- Expandable with additional GOAT plugins

## Installation
```bash
bun install @elizaos/plugin-goat
```

## Configuration
### Environment Variables
```typescript
EVM_PRIVATE_KEY=<Your EVM wallet private key>
EVM_PROVIDER_URL=<Your RPC provider URL (e.g., Infura, Alchemy)>
```

## Integration
The plugin integrates GOAT with Eliza, enabling agents to interact with various blockchain protocols. Users can configure chains, specify actions, and add plugins for different protocols.

## Links
- [GOAT Documentation](https://ohmygoat.dev/)
- [Available Chains](https://ohmygoat.dev/chains)
- [Chains, Wallets & Plugins](https://ohmygoat.dev/chains-wallets-plugins)
- [Smart Wallet Documentation](https://docs.crossmint.com/wallets/smart-wallets/overview)
````

## File: summaries/plugins/goplus.md
````markdown
# @elizaos/plugin-goplus

## Purpose
A plugin that enables on-chain security checks through the GoPlus API integration.

## Installation
```bash
bun add @elizaos/plugin-goplus
```

## Configuration
### Required Environment Variables
```env
GOPLUS_API_KEY=your_api_key  # Required: GoPlus API key for authentication
```

## Integration
Add the plugin to your character configuration:
```typescript
import { goplusPlugin } from '@elizaos/plugin-goplus';

const character = {
  plugins: [goplusPlugin],
};
```

## Key Features
- EVM Token Security
- Solana Token Security
- Sui Token Security
- Rugpull Detection
- NFT Security Analysis
- Address Security Verification
- Contract Approval Analysis
- Account Token Analysis (ERC20/721/1155)
- Signature Security
- URL/DApp Security

## Supported Networks
The plugin supports various networks including Ethereum (1), BSC (56), Polygon (137), Arbitrum (42161), Avalanche (43114), Optimism (10), Base (8453), and many more.
````

## File: summaries/plugins/grix.md
````markdown
# @elizaos/plugin-grix

## Purpose
A plugin that enables DeFi options data fetching and price analysis through the Grix Finance API integration.

## Key Features
- Real-time BTC/ETH price feeds
- Options pricing across multiple protocols
- Available liquidity information
- Call and Put options data
- Strike prices and expiry dates
- Protocol-specific pricing
- Position types (long/short)

## Installation
```bash
bun add @elizaos/plugin-grix
```

## Configuration
Requires a Grix API key, available via Discord or Telegram.

Two configuration methods:
1. Environment Variables:
```env
GRIX_API_KEY=your_api_key
```

2. Character Configuration:
```json
{
  "name": "Your Character",
  "plugins": ["@elizaos/plugin-grix"],
  "settings": {
    "secrets": {
      "GRIX_API_KEY": "your_api_key_here"
    }
  }
}
```

## Integration
Available Actions:
- getOptionPrice: Fetches options data across protocols
- getAssetPrice: Retrieves real-time price data for BTC/ETH

## Links
- [Discord Community](https://discord.com/invite/ZgPpr9psqp)
- [Telegram Group](https://t.me/GrixFinance)
- [Documentation](https://app.grix.finance/docs)
````

## File: summaries/plugins/holdstation.md
````markdown
# @elizaos/plugin-holdstation

## Purpose
Holdstation Wallet Plugin for Eliza

## Key Features
- Token swapping on hold.so (Holdstation swap)
- Currently on ZKsync Era, with Berachain coming soon

## Installation
```bash
bun add @elizaos/plugin-holdstation
```

## Configuration
The plugin requires the following environment variables:
```env
HOLDSTATION_PRIVATE_KEY=            # Required: Your wallet's private key
```

## Development
```bash
bun install --no-frozen-lockfile
bun build
bun test
```

## Credits
Special thanks to:
- The Eliza community for their contributions and feedback
````

## File: summaries/plugins/hyperbolic.md
````markdown
# Hyperbolic Plugin

## Purpose
A powerful plugin for managing GPU instances on the Hyperbolic platform through Eliza AI.

## Key Features
- List available GPUs with specifications and pricing
- Check account balance
- Monitor GPU instance status
- View spending history
- Rent GPU instances
- Terminate GPU instances

## Configuration
The plugin requires environment variables:
```bash
HYPERBOLIC_API_KEY=your_api_key_here
HYPERBOLIC_ENV=production     # or development
HYPERBOLIC_GRANULAR_LOG=true  # optional, for detailed logging
HYPERBOLIC_LOG_LEVEL=debug    # optional, to control the level
HYPERBOLIC_SPASH=true         # to show the splash
```

## Integration
Operates as a plugin for Eliza AI to manage GPU instances on the Hyperbolic platform.

## Example Usage
```
Show me available GPUs on Hyperbolic
Show my current balance on Hyperbolic
Check status of all my GPU instances on Hyperbolic
Show my spending history on Hyperbolic
Create a GPU instance on the Hyperbolic
[nodeid]las1-prd-acl-msi-09.fen.intra[/nodeid]
[cluster]circular-snapdragon-worm[/cluster]
Terminate the Hyperbolic instance [gpu]worse-walnut-viper[/gpu]
```
````

## File: summaries/plugins/hyperliquid.md
````markdown
# Hyperliquid Plugin for Eliza

## Purpose
This plugin enables interaction with the Hyperliquid DEX through Eliza, providing spot trading capabilities.

## Key Features
- Spot Trading (market and limit orders with price validation)
- Price Checking (real-time price information, 24h change, volume statistics)
- Order Management (cancel all open orders)

## Installation
Add the plugin to your Eliza configuration:
```json
{
  "plugins": ["@elizaos/plugin-hyperliquid"]
}
```

## Configuration
Set the following environment variables:
```env
HYPERLIQUID_PRIVATE_KEY=your_private_key  # Required for trading and cancelling orders
HYPERLIQUID_TESTNET=true_or_false        # Optional, defaults to false
```

## Integration
The plugin provides three main actions: SPOT_TRADE for placing market or limit orders, PRICE_CHECK for getting token price information, and CANCEL_ORDERS for cancelling all open orders.

## Example Usage
```
"buy 1 PIP"              # Market order
"sell 2 HYPE"            # Market order
"buy 1 PIP at 20 USDC"   # Limit order
"What's the price of PIP?" # Price check
"Cancel all orders"      # Cancel orders
```

## Links
License: MIT
````

## File: summaries/plugins/icp.md
````markdown
# @elizaos/plugin-icp

## Purpose
Internet Computer Protocol (ICP) plugin for Eliza OS.

## Key Features
- Create meme tokens on PickPump
- Interact with ICP canisters
- Handle ICRC-1 token standard
- Manage ICP wallets and identities
- Support for anonymous and authenticated calls

## Installation
```bash
bun install @elizaos/plugin-icp
```

## Configuration
The plugin requires the following environment variables:
```env
INTERNET_COMPUTER_PRIVATE_KEY=<your-ed25519-private-key>
```

## Integration
```typescript
import { icpPlugin } from '@elizaos/plugin-icp';

// Register the plugin with Eliza
eliza.registerPlugin(icpPlugin);
```

## Example Usage
```typescript
// Example usage in chat
'Create a space cat token on PickPump';
'Help me create a pizza-themed funny token on PP';
```

## Dependencies
- @dfinity/agent: ^2.1.3
- @dfinity/candid: ^2.1.3
- @dfinity/identity: ^2.1.3
- @dfinity/principal: ^2.1.3
- @elizaos/core: workspace:*
````

## File: summaries/plugins/image-generation.md
````markdown
# Plugin Image Generation

## Purpose
A plugin designed for generating and managing images, providing features like image manipulation, storage integration, and optimized handling for various use cases.

## Key Features
- Dynamic image generation
- Integration with storage solutions
- Optimized handling for high-resolution images

## Installation
```bash
bun install plugin-image-generation
```

## Configuration
### Environment Variables
- `IMAGE_STORAGE_BUCKET`: Name of the storage bucket
- `STORAGE_ACCESS_KEY`: Access key for storage integration
- `STORAGE_SECRET_KEY`: Secret key for storage integration

### TypeScript Configuration
Requires TypeScript environment with specific compiler options in tsconfig.json

## Example Usage
### Generate an Image
```typescript
import { generateImage } from 'plugin-image-generation';

const image = await generateImage({
  width: 800,
  height: 600,
  backgroundColor: '#ffffff',
  text: 'Hello World',
  font: 'Arial',
});

console.log('Generated Image:', image);
```

### Upload to Storage
```typescript
import { uploadImage } from 'plugin-image-generation';

const uploadResult = await uploadImage({
  imagePath: 'path/to/image.png',
  bucketName: 'my-storage-bucket',
});

console.log('Image uploaded successfully:', uploadResult);
```
````

## File: summaries/plugins/image.md
````markdown
# ImageDescriptionService

## Purpose
Processes and analyzes images to generate descriptions.

## Key Features
- Local processing using Florence model
- OpenAI Vision API integration
- Google Gemini support
- Automatic handling of different image formats, including GIFs
- Provider-specific capabilities (basic captioning, text detection, object recognition, etc.)

## Configuration
```env
# For OpenAI Vision
OPENAI_API_KEY=your_openai_api_key

# For Google Gemini
GOOGLE_GENERATIVE_AI_API_KEY=your_google_api_key
```

Provider selection:
- If `imageVisionModelProvider` is set to `google/openai`, it will use this one.
- Else if `model` is set to `google/openai`, it will use this one.
- Default if nothing is set is OpenAI.

## Example Usage
```typescript
const result = await runtime.executeAction('DESCRIBE_IMAGE', {
  imageUrl: 'path/to/image.jpg',
});
```
````

## File: summaries/plugins/imgflip.md
````markdown
# @elizaos/plugin-imgflip

## Purpose
A plugin for generating memes using the imgflip.com API.

## Key Features
- GENERATE_MEME action used for generating memes using the imgflip.com API based on the user's message.

## Installation
```bash
bun install @elizaos/plugin-imgflip
```

## Integration
The Imgflip plugin provides a GENERATE_MEME action that can be used to generate memes using the imgflip.com API based on the user's message.

## Dependencies
- @elizaos/core: workspace:*
````

## File: summaries/plugins/initia.md
````markdown
# @elizaos/plugin-initia

## Purpose
Initia plugin for Eliza OS that provides functionality to transfer INIT token.

## Installation
```bash
bun install @elizaos/plugin-initia
```

## Configuration
```bash
INITIA_PRIVATE_KEY=0x1234...abcd
INITIA_NODE_URL=https://...
INITIA_CHAIN_ID=initiaion-2
```

## Example Usage
```typescript
User: 'Send 1 INIT to init14l3c2vxrdvu6y0sqykppey930s4kufsvt97aeu';
Assistant: 'Sure! I am going to send 1 INIT to init14l3c2vxrdvu6y0sqykppey930s4kufsvt97aeu';
```

## Dependencies
- `@initia/initia.js`: Official initia js SDK
````

## File: summaries/plugins/injective.md
````markdown
# @elizaos/plugin-injective

## Purpose
A comprehensive plugin for interacting with the Injective chain through ElizaOS.

## Key Features
- Modules for multiple chain functionalities including:
  - Exchange (spot/derivative markets, orders, positions)
  - Auction (parameters, rounds, bidding)
  - Bank (balances, transfers, supply queries)
  - Governance (proposals, voting)
  - Staking (validator operations, delegations)
  - Token Factory (token creation and management)
  - WASM (smart contract functionality)
  - Plus additional modules for auth, distribution, explorer, IBC, insurance, mint, mito, peggy, permissions

## Installation
```bash
npm install @elizaos/plugin-injective
```

## Integration
Import and use the actions from the plugin:
```typescript
import { InjectiveActions } from '@elizaos/plugin-injective';
```

## License
ISC
````

## File: summaries/plugins/intiface.md
````markdown
# @elizaos/plugin-intiface

## Purpose
Intiface/Buttplug.io integration plugin for Eliza OS that enables control of intimate hardware devices.

## Key Features
- Support for multiple intimate hardware devices through Buttplug.io protocol
- Automatic device discovery and connection management
- Battery level monitoring for supported devices
- Vibration and rotation control (device-dependent)
- Graceful connection handling and cleanup
- Built-in device simulation for testing
- Support for customizable vibration patterns
- Automatic Intiface Engine management

## Installation
```bash
bun install @elizaos/plugin-intiface
```

## Configuration
The plugin can be configured through environment variables or runtime settings:
```env
INTIFACE_URL=ws://localhost:12345
INTIFACE_NAME=Eliza Intiface Client
DEVICE_NAME=Lovense Nora
```

## Integration
The plugin integrates with ElizaOS through the execute function to control devices and retrieve information:
```typescript
import { intifacePlugin } from '@elizaos/plugin-intiface';

// Vibrate device
const result = await eliza.execute({
  action: 'VIBRATE',
  content: {
    strength: 0.5, // 0.0 to 1.0
    duration: 1000, // milliseconds
  },
});
```

## Links
- [Buttplug.io](https://buttplug.io)
- [Intiface Engine](https://github.com/intiface/intiface-engine)
````

## File: summaries/plugins/iq6900.md
````markdown
# Code In Plugin For Eliza

## Purpose
Provides inscription functionality to engrave Eliza Character JSON files on the blockchain permanently through IQ6900's "Code-In" standard.

## Key Features
- Blockchain engraving of Character JSON files without compression
- Onchain git-like system for file management and updates
- Automatic loading of latest agent files

## Configuration
Edit your .env file to include IQ_WALLET_ADDRESS with the wallet address used on the website.

## Integration
The plugin automatically loads your latest agent file from the blockchain after inscription (wait about 5 minutes after inscription and type "pmpn start").

## Links
- Inscription site: https://elizacodein.com/
- Documentation: https://iq6900.gitbook.io/iq6900/eliza-code-in
````

## File: summaries/plugins/irys.md
````markdown
# @elizaos/plugin-irys

## Purpose
A plugin for ElizaOS that enables decentralized data storage and retrieval using Irys, a programmable datachain platform.

## Key Features
- Decentralized Data Storage: Store data permanently on the Irys network
- Data Retrieval: Fetch stored data using GraphQL queries
- Multi-Agent Support: Enable data sharing and collaboration between agents
- Ethereum Integration: Built-in support for Ethereum wallet authentication

## Installation
```bash
bun add @elizaos/plugin-irys
```

## Configuration
Required environment variables:
- `EVM_WALLET_PRIVATE_KEY`: Your EVM wallet private key
- `AGENTS_WALLET_PUBLIC_KEYS`: Public keys of agents to retrieve data (comma-separated)

An EVM (Base network) wallet with Base Sepolia ETH tokens is required for storing data larger than 100KB.

## Integration
The plugin provides an IrysService with methods for workers and providers to store and retrieve data on the Irys network. It enables decentralized knowledge base creation and multi-agent collaboration through a system of Providers, Orchestrators, and Workers.

## Example Usage
```typescript
const { IrysService } = require('@elizaos/plugin-irys');

const irysService = runtime.getService(ServiceType.IRYS);
const data = 'Provide Liquidity to the ETH pool on Stargate';
const result = await irysService.workerUploadDataOnIrys(
  data,
  IrysDataType.OTHER,
  IrysMessageType.DATA_STORAGE,
  ['DeFi'],
  ['Stargate', 'LayerZero']
);
```

## Links
- [Irys Documentation](https://docs.irys.xyz/)
- [A Decentralized Framework for Multi-Agent Systems Using Datachain Technology](https://trophe.net/article/A_Decentralized_Framework_for_Multi-Agent_Systems_Using_Datachain_Technology.pdf)
````

## File: summaries/plugins/isaacx.md
````markdown
# Isaac X Plugin for ElizaOS

## Purpose
This plugin provides integration with the Isaac X API, enabling ElizaOS Agents to reason scientifically using the latest academic research.

## Key Features
- Research question answering with academic citations
- Rate limit management (10 free requests/day)
- Automatic reference tracking

## Installation
```bash
bun add @elizaos/plugin-isaacx
```

## Configuration
1. First, visit [isaacx.ai/docs](https://isaacx.ai/docs) to create your API key.

2. Add your Isaac X API key to your environment variables:
```bash
ISAACX_API_KEY=ix_your_api_key_here
```

3. Register the plugin in your character configuration:
```typescript
import isaacXPlugin from '@elizaos/plugin-isaacx';

const character = {
  plugins: [isaacXPlugin],
};
```

## Integration
The plugin connects to ElizaOS through the character configuration system and provides actions for research question answering.

## Example Usage
```typescript
// Ask a research question
const response = await runtime.processAction('ANSWER_RESEARCH_QUESTION', {
  question: 'What are the latest developments in quantum computing?',
});

// The response will include both the answer and academic citations
console.log('Research Findings:', response.answer);
console.log('Academic Sources:', response.references);
```

## Links
[isaacx.ai/docs](https://isaacx.ai/docs)
````

## File: summaries/plugins/lens-network.md
````markdown
# @elizaos/plugin-abstract

## Purpose
A plugin for interacting with the Abstract blockchain network within the ElizaOS ecosystem, enabling seamless token transfers on the Abstract testnet.

## Installation
```bash
bun install @elizaos/plugin-lensNetwork
```

## Configuration
The plugin requires the following environment variables:
```typescript
LENS_ADDRESS=<Your Lens wallet address>
LENS_PRIVATE_KEY=<Your Lens private key>
```

## Integration
The plugin can be imported and responds to natural language commands for transferring tokens.

## Example Usage
```typescript
// Import the plugin
import { lensPlugin } from '@elizaos/plugin-lensNetwork';

// Example command:
'Send 1 Grass to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62';
```
````

## File: summaries/plugins/lensNetwork.md
````markdown
# @elizaos/plugin-abstract

## Purpose
A plugin for interacting with the Abstract blockchain network within the ElizaOS ecosystem, enabling seamless token transfers on the Abstract testnet.

## Installation
```bash
bun install @elizaos/plugin-lensNetwork
```

## Configuration
The plugin requires the following environment variables:
```typescript
LENS_ADDRESS=<Your Lens wallet address>
LENS_PRIVATE_KEY=<Your Lens private key>
```

## Integration
The plugin integrates with ElizaOS to handle natural language commands for token transfers like "Send 1 Grass to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62".

## Example Usage
```typescript
import { lensPlugin } from '@elizaos/plugin-lensNetwork';
```
````

## File: summaries/plugins/letzai.md
````markdown
# @elizaos/plugin-letzai

## Purpose
A plugin to integrate LetzAI Image Generation capabilities into the elizaos ecosystem, enabling agents to generate images using any LetzAI Models.

## Key Features
- Uses the LetzAI API and any models available to API user
- Introduces its own GENERATE_IMAGE action

## Installation
```bash
bun install @elizaos/plugin-letzai
```

## Configuration
### Environment Variables
```typescript
LETZAI_API_LEY=<Your LetzAI API Key>
LETZAI_MODELS="@hailee, @examplemodel2"
```

## Integration
The plugin can be integrated in character.json:
```json
"plugins": ["../../packages/plugin-letzai/src/index.ts"],
"actions": ["GENERATE_IMAGE"]
```

## Links
- [LetzAI API](https://www.letz.ai/docs/api)
- [Create API Key](https://www.letz.ai/subscription)
````

## File: summaries/plugins/lightlink.md
````markdown
# @elizaos/plugin-lightlink

## Purpose
The LightLink Plugin allows agents to interact with the LightLink network.

## Key Features
- Check balances
- Transfer both ERC20 and Eth
- Swap (via Elektrik)
- Search the block explorer for contracts and addresses

## Installation
```
bun add @elizaos/plugin-lightlink
```

## Configuration
### Required Environment Variables
```env
# Required
EVM_PRIVATE_KEY=your-private-key-here

# Optional - Custom RPC URLs
LIGHTLINK_MAINNET_RPC_URL=https://your-custom-mainnet-rpc-url
LIGHTLINK_TESTNET_RPC_URL=https://your-custom-testnet-rpc-url
```

### Chain Configuration
By default, LightLink Phoenix (mainnet) is enabled. Additional chains can be added in the character config.

## Example Usage
- Check balance: `Check the balance of vitalik.eth on lightlink`
- Transfer: `Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e`
- Swap: `Swap 1 ETH to USDC on lightlink testnet`
- Search: `Whats the contract address for the USDC token on lightlink?`
````

## File: summaries/plugins/lightning.md
````markdown
# @elizaos/plugin-lightning

## Purpose
This plugin enables creating lightning invoices or paying invoices.

## Key Features
- 💱 Make a new off-chain invoice.
- 📊 Make an off-chain payment.

## Installation
Add the plugin to your Eliza configuration:
```json
{
  "plugins": ["@elizaos/plugin-lightning"]
}
```

## Configuration
Set the following environment variables:
```env
LND_TLS_CERT=your_lnnode_tls_cert   #Base64 of LND certificate
LND_MACAROON=020.....        #Base64 encoded admin.macaroon file
LND_SOCKET='x.x.x.x:10009'
```

## Example Usage
### CREATE_INVOICE
```text
"Help me create an invoice for 1000sats"
"Create an invoice for 1000sats"
```
Returns: lnbcrt....

### PAY_INVOICE
```text
"Pay invoice lnbcrt10u1pncndjvpp58y77adkngcz3ypx6t39j245ydvk2vu67c8ugvegee3gt5wgs7yjqdxvdec82c33wdmnq73s0qcxwurrxp4nquncxe4h56m9xu6xwetyd3mrq6ehdguxkd35wuurgarex4u8gefkdsekgdtnddehxurrxecxvhmwwp6kyvfexekhxwtv8paryvnpwsuhxdryvachwangw3kn2atddq6kzvrvwfcxzanewce8ja34d43k56rkweu8jdtcwv68zmrsvdescqzzsxqrrsssp5q3hv38wfprvaazzwf8c4t33tzjcac5xz94sk8muehmn5szqaw6ks9qxpqysgqt5pjhna4922s8ayzgu5rh8clx7psp2culdr5r6cxxxqzs3e5ep345p45vggg0qegt6fu3prdrqgpd8v70l9wdhekt8gex5e8pqvxg2sp97fkmd"
```
````

## File: summaries/plugins/lit.md
````markdown
# @elizaos/plugin-lit

## Purpose
A plugin that integrates Lit Protocol functionality into the elizaOS runtime environment, enabling secure and decentralized access control and cryptographic operations.

## Key Features
- Deploy and manage Lit Actions for programmable cryptography
- Interact with Lit Agent Wallet for secure transaction signing
- Built-in tools for common blockchain operations:
  - ECDSA signing
  - ERC20 token transfers
  - Uniswap interactions

## Installation
```bash
npm install @elizaos/plugin-lit
```

## Configuration
There are two ways to register the plugin:
1. Add to your agent's plugins in `agent/src/index.ts`:
```typescript
import { LitPlugin } from '@elizaos/plugin-lit';

export default {
  plugins: [
    // ... other plugins
    litPlugin,
  ],
  // ... rest of your agent configuration
};
```

2. Or add it in your character configuration:
```typescript
{
  name: "YourCharacter",
  plugins: [
    // ... other plugins
    "@elizaos/plugin-lit"
  ]
}
```

## Integration
After registration, initialize Lit Protocol:
```javascript
await elizaOS.lit.initialize({
  // Your configuration options
});
```

## Example Usage
```javascript
// Deploy Lit Action
const litAction = await elizaOS.lit.deployAction({
  code: `
    (async () => {
      // Your Lit Action code here
    })();
  `,
});

// ECDSA Signing
const signature = await elizaOS.lit.tools.ecdsaSign({
  message: 'Message to sign',
  // Additional parameters
});

// ERC20 Token Transfer
const transfer = await elizaOS.lit.tools.erc20Transfer({
  tokenAddress: '0x...',
  recipient: '0x...',
  amount: '1000000000000000000', // 1 token with 18 decimals
});
```

## Links
- [Lit Protocol Documentation](https://developer.litprotocol.com/)
- [Agent Wallet Documentation](https://github.com/LIT-Protocol/agent-wallet)
````

## File: summaries/plugins/llama.md
````markdown
# @elizaos/plugin-llama

## Purpose
Core LLaMA plugin for Eliza OS that provides local Large Language Model capabilities.

## Key Features
- Local LLM Support: Run LLaMA models locally
- GPU Acceleration: CUDA support for faster inference
- Flexible Configuration: Customizable parameters for text generation
- Message Queuing: Efficient handling of multiple requests
- Automatic Model Management: Download and verification systems

## Installation
```bash
npm install @elizaos/plugin-llama
```

## Configuration
The plugin can be configured through environment variables:
```env
LLAMALOCAL_PATH=your_model_storage_path
OLLAMA_MODEL=optional_ollama_model_name
```

## Integration
```typescript
import { createLlamaPlugin } from '@elizaos/plugin-llama';

// Initialize the plugin
const llamaPlugin = createLlamaPlugin();

// Register with Eliza OS
elizaos.registerPlugin(llamaPlugin);
```
````

## File: summaries/plugins/massa.md
````markdown
# Massa Plugin

## Purpose
This plugin aims to be the basis of all interactions with the Massa ecosystem.

## Links
[https://docs.massa.net/](https://docs.massa.net/)
````

## File: summaries/plugins/merkle-eliza-plugin.md
````markdown
# MerkleTrade Plugin for Eliza

## Purpose
A sample plugin for interacting with MerkleTrade within the elizaOS ecosystem.

## Configuration
The plugin requires the following environment variables to be set:

Merkle Configuration
```env
MERKLE_TRADE_NETWORK=               # Must be one of mainnet, testnet
MERKLE_TRADE_APTOS_PRIVATE_KEY=     # Aptos private key
```

## Installation
```json
{
  "plugins": ["@elizaos/plugin-merkle"]
}
```

## Example Usage
```bash
// The plugin responds to natural language like:

You: "Open a BTC Long position on the Merkle Trade platform with 1000 pay and 10 leverage."
Agent: "Successfully market order BTC with 1000 pay and 10 leverage, Transaction: 0x104af5d1a786a2e1a4721a721b2cfccc7e15fa41eec15a489ba1768790adb523"
```

## Links
- [Merkle Documentation](https://docs.merkle.trade/)
- [Aptos Documentation](https://aptos.dev/)
- [Move Language Guide](https://move-language.github.io/move/)
````

## File: summaries/plugins/merkle.md
````markdown
# MerkleTrade Plugin for Eliza

## Purpose
This plugin enables interaction with MerkleTrade within the elizaOS ecosystem.

## Configuration
The plugin requires the following environment variables:

Merkle Configuration
```env
MERKLE_TRADE_NETWORK=               # Must be one of mainnet, testnet
MERKLE_TRADE_APTOS_PRIVATE_KEY=     # Aptos private key
```

## Installation
```json
{
  "plugins": ["@elizaos/plugin-merkle"]
}
```

## Integration
The plugin responds to natural language commands related to MerkleTrade operations.

## Example Usage
```bash
You: "Open a BTC Long position on the Merkle Trade platform with 1000 pay and 10 leverage."
Agent: "Successfully market order BTC with 1000 pay and 10 leverage, Transaction: 0x104af5d1a786a2e1a4721a721b2cfccc7e15fa41eec15a489ba1768790adb523"
```

## Links
- [Merkle Documentation](https://docs.merkle.trade/)
- [Aptos Documentation](https://aptos.dev/)
- [Move Language Guide](https://move-language.github.io/move/)
````

## File: summaries/plugins/messari-ai-toolkit.md
````markdown
# @elizaos/plugin-messari-ai-toolkit

## Purpose
A powerful Eliza OS plugin that integrates Messari's AI Toolkit to provide advanced crypto market research capabilities to your Eliza agent.

## Key Features
- Seamless integration with Messari's AI-Toolkit `/chat/completions` API
- Intelligent detection of crypto-related research questions
- Real-time market data and asset metrics analysis
- Access to consolidated news summarizations
- Asset due diligence insights
- Fundraising and investment data visualization capabilities

## Installation
For Main Eliza Repository:
```bash
bun --filter agent add github:messari/plugin-messari-ai-toolkit
```

For Eliza Starter:
```bash
bun add github:messari/plugin-messari-ai-toolkit
```

## Configuration
Requires a Messari API key with:
1. An Enterprise (ENT) subscription
2. Purchase of the AI Toolkit service package + credits
3. API key generation through Messari Account Settings

## Integration
Import and register the plugin with your Eliza agent. It automatically detects relevant research questions and queries Messari's AI Toolkit for comprehensive answers.

## Links
https://github.com/messari/plugin-messari-ai-toolkit/blob/master/.github/assets/eliza-tutorial.mp4
https://docs.messari.io/reference/chat-completion
````

## File: summaries/plugins/mina.md
````markdown
# @elizaos/plugin-mina

## Purpose
Core Mina blockchain plugin for Eliza OS that provides essential services and actions for token operations and wallet management.

## Key Features
- Transfer MINA tokens between wallets
- Query wallet balances and portfolio values
- Track token prices and valuations
- Manage wallet interactions with the Mina network
- Cache token prices for performance optimization
- Get faucet tokens for testing purposes
- Get balances for wallets

## Installation
```bash
npm install @elizaos/plugin-mina
```

## Configuration
The plugin requires the following environment variables:
```env
MINA_PRIVATE_KEY=your_private_key
MINA_NETWORK=mainnet|devnet
```

## Integration
Import and register the plugin in your Eliza configuration:
```typescript
import { minaPlugin } from '@elizaos/plugin-mina';

export default {
  plugins: [minaPlugin],
  // ... other configuration
};
```

## Example Usage
Send tokens:
```typescript
User: 'Send 1 MINA to B62qkGSBuLmqYApYoWTmAzUtwFVx6Fe9ZStJVPzCwLjWZ5NQDYTiqEU';
Assistant: "I'll send 1 MINA token now...";
```

Check wallet balance:
```typescript
User: "What's my wallet balance?";
Assistant: 'Your wallet contains 299 MINA ($150 USD)...';
```

## Links
- [Mina Documentation](https://docs.minaprotocol.com/)
- [Mina Network Dashboard](https://minascan.io/)
- [Mina GitHub Repository](https://github.com/MinaProtocol/mina)
````

## File: summaries/plugins/mind-network.md
````markdown
# @elizaos/plugin-mind-network

## Purpose
A plugin for interacting with Mind Network Hubs within the Eliza ecosystem, allowing CitizenZ and communities to secure trust in their agents' operation and decisioning.

## Key Features
- Web3 Wallet integration
- Voter Registration for Mind Network Hubs
- FHE Encryption for privacy-preserving voting
- Submit Encrypted Votes
- Reward Tracking for voting contributions

## Installation
```bash
bun install @elizaos/plugin-mind-network
```

## Configuration
Environment variables required:
```bash
MIND_HOT_WALLET_PRIVATE_KEY=<Hot wallet private key to vote>
MIND_COLD_WALLET_ADDRESS=<Cold wallet address to receive rewards>
```

## Integration
Integrates with ElizaOS characters for conversational interactions, enabling users to register as voters, check rewards, encrypt votes using FHE, and submit votes through natural language prompts.

## Example Usage
Sample conversation flow showing registration, reward checking, vote encryption, and vote submission through conversational AI interaction.

## Links
- [Mind Network](https://www.mindnetwork.xyz/)
- [Randgen Hub](https://dapp.mindnetwork.xyz/votetoearn/voteonhubs/3)
- [Discord Support](https://discord.com/invite/UYj94MJdGJ)
- [Twitter](https://x.com/mindnetwork_xyz)
````

## File: summaries/plugins/moralis.md
````markdown
# @elizaos/plugin-moralis

## Purpose
A plugin for interacting with Moralis APIs to fetch various blockchain data across different chains, currently supporting Solana chain endpoints.

## Key Features
- Fetch Solana trading pairs for specific tokens
- Get detailed statistics for Solana trading pairs
- Access aggregated token statistics across all pairs
- Retrieve price history (OHLCV) data
- Get current token prices
- Fetch comprehensive token metadata

## Installation
```bash
bun install @elizaos/plugin-moralis
```

## Configuration
| Variable Name     | Description          |
| ----------------- | -------------------- |
| `MORALIS_API_KEY` | Your Moralis API key |

## Integration
Import and initialize the plugin using:
```typescript
import { moralisPlugin } from '@elizaos/plugin-moralis';
const plugin = moralisPlugin;
```

## Example Usage
- "Get all Solana trading pairs for token So11111111111111111111111111111111111111112"
- "Get stats for Solana pair A8nPhpCJqtqHdqUk35Uj9Hy2YsGXFkCZGuNwvkD3k7VC"
- "Get aggregated stats for Solana token SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt"
- "Get hourly candlestick prices for Solana pair A8nPhpCJqtqHdqUk35Uj9Hy2YsGXFkCZGuNwvkD3k7VC"
- "Get current price of Solana token 6Rwcmkz9yiYVM5EzyMcr4JsQPGEAWhcUt"
- "What's the FDV and supply for SRM token?"

## Links
License: MIT
````

## File: summaries/plugins/movement.md
````markdown
# @elizaos/plugin-movement

## Purpose
Movement Network plugin for Eliza OS that enables Movement Network blockchain functionality for your Eliza agent.

## Key Features
- Send MOVE tokens
- Check wallet balances
- Support for Movement Network transactions

## Installation
```bash
bun add @elizaos/plugin-movement
```

## Configuration
Add the Movement plugin to your character's configuration:
```json
{
  "name": "Movement Agent",
  "plugins": ["@elizaos/plugin-movement"],
  "settings": {
    "secrets": {
      "MOVEMENT_PRIVATE_KEY": "your_private_key_here",
      "MOVEMENT_NETWORK": "bardock"
    }
  }
}
```

Set up environment variables in `.env` file:
```bash
MOVEMENT_PRIVATE_KEY=your_private_key_here
MOVEMENT_NETWORK=bardock
```

## Integration
Enables Movement Network blockchain functionality for your Eliza agent.
````

## File: summaries/plugins/multichain.md
````markdown
# @elizaos/plugin-multichain

## Purpose
Cross-chain integration plugin for Eliza OS that enables seamless token transfers and swaps across multiple blockchain networks using Chain Signatures and NEAR Intents technologies.

## Key Features
- Cross-chain token transfers
- Multi-chain token swaps
- Support for major blockchain networks (Bitcoin, Ethereum, EVM chains, Cosmos ecosystem coming soon)
- Chain Signatures integration
- NEAR Intents for optimized execution
- Portfolio tracking across chains (coming soon)
- Comprehensive error handling

## Installation
```bash
bun install @elizaos/plugin-multichain
```

## Configuration
Requires environment variables for each supported chain including NEAR, Ethereum, and various EVM chains, plus global settings like DEFAULT_SLIPPAGE.

## Example Usage
### Multi-Chain Transfer
```typescript
const result = await eliza.execute({
  action: 'MULTI_CHAIN_TRANSFER',
  content: {
    chain: 'BTC',
    networkId: 'testnet',
    token: null, // Native BTC
    amount: '0.1',
    recipient: 'tb1qmw3xw3y8jtm4054w02kfz58tmf6pcse02twrh8',
  },
});
```

### Cross-Chain Swap
```typescript
const result = await eliza.execute({
  action: 'CROSS_CHAIN_SWAP',
  content: {
    sourceChain: 'ETH',
    targetChain: 'COSMOS',
    inputToken: 'ETH',
    outputToken: 'ATOM',
    amount: '1.0',
    recipient: 'cosmos1...',
  },
});
```
````

## File: summaries/plugins/multiversx.md
````markdown
# @elizaos/plugin-multiversx

## Purpose
MultiversX blockchain integration plugin for Eliza OS that enables token management and transfers.

## Key Features
- EGLD and ESDT token transfers
- Token creation and management
- Multiple network support (mainnet, devnet, testnet)
- Secure transaction signing
- Automatic nonce management
- Transaction status tracking
- Built-in denomination handling
- Comprehensive error handling

## Installation
```bash
bun install @elizaos/plugin-multiversx
```

## Configuration
The plugin requires environment variables or runtime settings:
```env
MVX_PRIVATE_KEY=your-wallet-private-key
MVX_NETWORK=devnet  # mainnet, devnet, or testnet
ACCESS_TOKEN_MANAGEMENT_TO=everyone  # you can put an userid to limit token managament to one user only
```

## Integration
Integrates with ElizaOS through standard action execution patterns, connecting to the MultiversX blockchain using their official SDK.

## Example Usage
```typescript
import { multiversxPlugin } from '@elizaos/plugin-multiversx';

// Send EGLD
const result = await eliza.execute({
  action: 'SEND_TOKEN',
  content: {
    tokenAddress: 'erd1...',
    amount: '1',
    tokenIdentifier: 'EGLD',
  },
});
```

## Links
- [MultiversX Documentation](https://docs.multiversx.com/)
- [MultiversX Developer Portal](https://docs.multiversx.com/developers/getting-started/introduction)
- [MultiversX GitHub Repository](https://github.com/multiversx/mx-sdk-js)
````

## File: summaries/plugins/near.md
````markdown
# @elizaos/plugin-near

## Purpose
NEAR Protocol integration plugin for Eliza OS that enables token management, transfers, and swaps using Ref Finance.

## Key Features
- NEAR token transfers
- Token swaps via Ref Finance
- Multiple network support (mainnet, testnet)
- Secure transaction signing
- Automatic storage deposit handling
- Real-time price feeds
- Portfolio tracking and management
- Smart routing for optimal swaps
- Built-in denomination handling
- Comprehensive error handling

## Installation
```bash
bun install @elizaos/plugin-near
```

## Configuration
The plugin requires environment variables or runtime settings:
```env
NEAR_WALLET_SECRET_KEY=your-wallet-private-key
NEAR_WALLET_PUBLIC_KEY=your-wallet-public-key
NEAR_ADDRESS=your-account.near
NEAR_NETWORK=testnet  # mainnet or testnet
NEAR_RPC_URL=https://neart.lava.build
NEAR_SLIPPAGE=0.01  # 1% slippage tolerance
```

## Integration
The plugin integrates with ElizaOS through actions like `SEND_NEAR` and `EXECUTE_SWAP_NEAR` and provides wallet information through the wallet provider.

## Example Usage
```typescript
import { nearPlugin } from '@elizaos/plugin-near';

// Send NEAR
const result = await eliza.execute({
  action: 'SEND_NEAR',
  content: {
    recipient: 'bob.near',
    amount: '1.5',
  },
});
```

## Links
- [NEAR Documentation](https://docs.near.org/)
- [NEAR Developer Portal](https://near.org/developers)
- [NEAR Network Dashboard](https://nearscan.io/)
- [NEAR GitHub Repository](https://github.com/nearprotocol/near-api-js)
````

## File: summaries/plugins/news.md
````markdown
# @elizaos/plugin-news

## Purpose
A plugin for fetching and handling real-time news data through NewsAPI integration.

## Key Features
- Fetch latest news articles from NewsAPI
- Search news by specific topics or keywords
- Get article summaries including titles, descriptions, and URLs
- Limit results to most recent and relevant content

## Installation
```bash
npm install @elizaos/plugin-news
```

## Configuration
The plugin requires the following environment variable:
```env
NEWS_API_KEY=your_newsapi_key  # Required for accessing NewsAPI
```

## Integration
Import and register the plugin in your Eliza configuration:
```typescript
import { newsPlugin } from '@elizaos/plugin-news';

export default {
  plugins: [newsPlugin],
  // ... other configuration
};
```

## Example Usage
The `CURRENT_NEWS` action responds to queries like:
- "what's the latest news about `searchTerm`?"
- "show me current events about `searchTerm`?"
- "what's going on in the world of `searchTerm`?"

Returns up to 5 recent articles with title, description, URL, and content preview.

## Links
- [NewsAPI](https://newsapi.org/)
- [Agent Dev School Part 2](https://www.youtube.com/watch?v=XenGeAcPAQo)
````

## File: summaries/plugins/nft-collections.md
````markdown
# NFT Collections Plugin

## Purpose
A powerful plugin for interacting with NFT collections, providing comprehensive market data, social analytics, and trading capabilities through various APIs including Reservoir, CoinGecko, and more.

## Key Features
- Real-time NFT collection data and market stats
- Floor prices, volume, and market cap tracking
- Collection activity monitoring
- Token-level data and attributes
- Collection statistics and rankings
- Market intelligence for 420+ verified collections
- Social analytics with sentiment analysis
- ML-powered price predictions
- GraphQL and WebSocket support

## Installation
```bash
bun add @elizaos/plugin-nft-collections
```

## Configuration
### Required:
```env
RESERVOIR_API_KEY=your-reservoir-api-key
```

### Optional:
```typescript
const plugin = new NFTCollectionsPlugin({
  caching: {
    enabled: true,
    ttl: 3600000, // 1 hour
    maxSize: 1000,
  },
  security: {
    rateLimit: {
      enabled: true,
      maxRequests: 100,
      windowMs: 60000,
    },
  },
  maxConcurrent: 5,
  maxRetries: 3,
  batchSize: 20,
});
```

## Integration
The plugin connects with ElizaOS through GraphQL, WebSocket real-time updates, and IPFS integration. It provides webhooks, ML-powered analytics, and supports authentication, security features, and trading agents.

## Example Usage
```typescript
// Get top collections with optimized batch processing
const collections = await nftService.getTopCollections();

// Get market intelligence with caching
const intelligence = await marketIntelligenceService.getMarketIntelligence('0x1234');

// Get social metrics with rate limiting
const metrics = await socialAnalyticsService.getSocialMetrics('0x1234');
```
````

## File: summaries/plugins/nft-generation.md
````markdown
# @elizaos/plugin-nft-generation

## Purpose
NFT collection generation plugin for Eliza OS that enables NFT creation, collection management, and verification on the Solana blockchain.

## Key Features
- Automated NFT collection creation
- AI-powered image generation for NFTs
- Collection logo generation
- Metadata creation and management
- AWS S3 integration for asset storage
- Solana blockchain integration
- NFT verification system
- Automatic nonce management
- Comprehensive error handling

## Installation
```bash
bun install @elizaos/plugin-nft-generation
```

## Configuration
Requires environment variables for:
- Solana Configuration (keys, cluster settings)
- AWS Configuration (access keys, region, bucket)

## Integration
Provides REST API endpoints for NFT operations and exposes handlers for collection creation, NFT minting, and verification that integrate with ElizaOS runtime.

## Example Usage
```typescript
import { createCollection, createNFT, verifyNFT } from './handlers';

const runtime = initializeRuntime();

(async () => {
  // Step 1: Create Collection
  const collectionResult = await createCollection({
    runtime,
    collectionName: 'MyUniqueCollection',
  });

  // Step 2: Create an NFT in the Collection
  const nftResult = await createNFT({
    runtime,
    collectionName: 'MyUniqueCollection',
    collectionAddress: collectionResult.address,
    collectionAdminPublicKey: collectionResult.collectionInfo.adminPublicKey,
    collectionFee: 0.01,
    tokenId: 1,
  });

  // Step 3: Verify the NFT
  const verificationResult = await verifyNFT({
    runtime,
    collectionAddress: collectionResult.address,
    NFTAddress: nftResult.address,
  });
})();
```

## Links
- [Solana Documentation](https://docs.solana.com/)
- [Solana Developer Portal](https://solana.com/developers)
- [Solana Network Dashboard](https://solscan.io/)
- [Solana GitHub Repository](https://github.com/solana-labs/solana)
````

## File: summaries/plugins/nkn.md
````markdown
# plugin-nkn

## Purpose
Integrates NKN to enable communication between multiple AI agents or users within the Eliza framework.

## Key Features
- Supports sending and receiving messages via a decentralized network
- Ensures low latency and secure transmission

## Integration
Leverages the NKN protocol to facilitate messaging and communication between various AI agents and users within the Eliza framework.

## Links
https://nkn.org/
````

## File: summaries/plugins/node.md
````markdown
# @elizaos/plugin-node

## Purpose
Core Node.js plugin for Eliza OS that provides essential services and actions for file operations, media processing, and cloud integrations.

## Key Features
- AWS S3 Integration
- Browser Automation
- Image Processing
- PDF Processing
- Speech Synthesis
- Transcription
- Video Processing
- LLaMA Integration

## Installation
```bash
npm install @elizaos/plugin-node
```

## Configuration
Requires various environment variables depending on services used, including:
- Core Settings: OPENAI_API_KEY
- Voice Settings: ELEVENLABS_XI_API_KEY, ELEVENLABS_MODEL_ID, etc.
- AWS Settings: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.

## Integration
The plugin connects to ElizaOS through registration:
```typescript
import { createNodePlugin } from '@elizaos/plugin-node';
const nodePlugin = createNodePlugin();
elizaos.registerPlugin(nodePlugin);
```

## Example Usage
```typescript
const result = await runtime.executeAction('DESCRIBE_IMAGE', {
  imageUrl: 'path/to/image.jpg',
});
```

## Links
- https://github.com/elizaos-plugins/plugin-pdf
- https://github.com/elizaos-plugins/plugin-llama
- https://github.com/elizaos-plugins/plugin-image
- https://github.com/elizaos-plugins/plugin-aws-s3
- https://github.com/elizaos-plugins/plugin-browser
- https://github.com/elizaos-plugins/plugin-speech-tts
````

## File: summaries/plugins/nvidia-nim.md
````markdown
# NVIDIA NIM Plugin

## Purpose
This plugin provides integration with NVIDIA AI Foundation Models through various specialized actions for content analysis and safety checks.

## Installation
1. Create a free account at [NVIDIA AI Foundation Models](https://build.nvidia.com/models)
2. Generate required API keys: `NVIDIA_NIM_API_KEY` and `NVIDIA_NGC_API_KEY`
3. Create a `.env` file with necessary configurations

## Key Features
- AI Image Detection: Analyzes if images are AI-generated
- Cosmos Vision Analysis: Analyzes images and videos using multimodal vision-language model
- DeepFake Detection: Detects manipulation in images, focusing on facial modifications
- Jailbreak Detection: Analyzes prompts for attempts to bypass AI safety measures
- Content Safety Analysis: Evaluates messages for safety and policy compliance
- Topic Control: Determines if messages stay within defined topical boundaries

## Example Usage
Test prompts are provided for each feature, including AI image detection, deepfake detection, cosmos vision analysis, topic control, and content safety checks.
````

## File: summaries/plugins/obsidian.md
````markdown
# @elizaos/plugin-obsidian

## Purpose
An Obsidian plugin for ELIZA OS that provides seamless integration with Obsidian vaults, enabling powerful file and note management capabilities.

## Key Features
1. Deep traversal of Obsidian notes
2. Advanced search functionality
3. Obsidian memory store integration
4. Naval database integration as an example

## Installation
```bash
npm install @elizaos/plugin-obsidian
# or
yarn add @elizaos/plugin-obsidian
# or
bun add @elizaos/plugin-obsidian
```

## Configuration
Requires character secret settings:
```json
{
  "settings": {
    "secrets": {
      "OBSIDIAN_API_TOKEN": "your-obsidian-api-token",
      "OBSIDIAN_API_PORT": "your-obsidian-api-port", // Optional (default: 27123)
      "OBSIDIAN_API_URL": "https://your-obsidian-api-url" // Optional (default: "http://127.0.0.1:27123")
    }
  }
}
```

## Integration
Import and register the plugin in your Eliza agent configuration:
```typescript
import { obsidianPlugin } from '@elizaos/plugin-obsidian';

export default {
  plugins: [
    getSecret(character, 'OBSIDIAN_API_TOKEN') ? obsidianPlugin : null,
  ],
};
```

## Example Usage
```typescript
// List all files
const files = await obsidian.listFiles();

// Get a note with its content
const note = await obsidian.getNote('path/to/note.md');

// Search in vault
const results = await obsidian.search('query');

// Create or update a file
await obsidian.saveFile('DOCUMENTS/report.txt', 'Content', true);
```

## Links
- Documentation: https://elizaos.github.io/eliza/
- Discord: https://discord.gg/elizaos
````

## File: summaries/plugins/okto.md
````markdown
# @okto_web3/eliza-plugin

## Purpose
A comprehensive integration plugin for ElizaOS that provides access to Okto's APIs and services, enabling seamless Web3 interactions.

## Key Features
- Portfolio Management (user portfolio data, NFT details, token holdings)
- Wallet Management (access wallets, view addresses)
- Token Operations (transfer tokens, swap tokens, execute transactions)
- NFT Operations (view collections, transfer NFTs, track balances)
- Chain Support (multiple networks including Ethereum, Polygon, Solana, etc.)
- Transaction History (view order history across networks)

## Installation
```bash
npm install @okto_web3/eliza-plugin
```

## Configuration
Requires environment variables:
- OKTO_ENVIRONMENT (defaults to "sandbox")
- OKTO_CLIENT_PRIVATE_KEY (required)
- OKTO_CLIENT_SWA (required)
- GOOGLE_CLIENT_ID (required)
- GOOGLE_CLIENT_SECRET (required)

## Integration
Import and initialize the plugin, then add it to AgentRuntime's plugins array and include oktoPlugin.oktoService in services.

## Example Usage
Available actions include OKTO_GET_PORTFOLIO, OKTO_GET_ACCOUNT, OKTO_TRANSFER, OKTO_SWAP, and others for managing tokens, NFTs, and viewing blockchain data.

## Links
[Okto Eliza Plugin Documentation](https://docsv2.okto.tech/docs/okto-eliza-plugin)
````

## File: summaries/plugins/omniflix.md
````markdown
# @elizaos/plugin-omniflix

## Purpose
A plugin for ElizaOS that enables interaction with the OmniFlix Network blockchain.

## Installation
```bash
npm install @elizaos/plugin-omniflix
```

## Configuration
### Environment Variables
```env
# Required: RPC endpoint for OmniFlix Network
OMNIFLIX_RPC_ENDPOINT="https://rpc.omniflix.network:443"

# Required: API endpoint for OmniFlix Network
OMNIFLIX_API_URL="https://rest.omniflix.network"

# Required: Either mnemonic or private key (one is required)
OMNIFLIX_MNEMONIC="your mnemonic"
# OR
OMNIFLIX_PRIVATE_KEY="your hex private key"
```

Network configurations are available for both Mainnet and Testnet.

## Key Features
1. Bank Operations
   - Check Balance
   - Send Tokens
   - Check Staked Balance

2. Staking Operations
   - Delegate Tokens
   - Undelegate Tokens
   - Redelegate Tokens
   - Cancel Unbonding

3. Governance Operations
   - Vote on Proposals (yes, no, abstain, no_with_veto)

## Integration
1. Import the plugin:
```typescript
import { OmniflixPlugin } from '@elizaos/plugin-omniflix';
```

2. Register with ElizaOS:
```typescript
import { Eliza } from '@elizaos/core';

const eliza = new Eliza();
eliza.registerPlugin(OmniflixPlugin);
```

## Example Usage
```typescript
import { voteOnProposal } from '@elizaos/plugin-omniflix';

// Vote on a proposal
const voteOnProposal = await voteOnProposal(
  {
    proposalId: '1',
    vote: 'YES',
  },
  {
    apiEndpoint: 'https://rest.omniflix.network',
    rpcEndpoint: 'https://rpc.omniflix.network:443',
  }
);
```
````

## File: summaries/plugins/opacity.md
````markdown
# @elizaos/adapter-opacity

## Purpose
This adapter integrates Opacity proofs into ElizaOS, enabling verifiable inference results from AI model providers through the CloudFlare AI Gateway.

## Key Features
- Implements `IVerifiableInferenceAdapter` interface for standardized verifiable inference
- Support for multiple AI model providers
- Customizable options for each request
- Built-in proof verification

## Installation
```bash
bun add @elizaos/adapter-opacity
```

## Configuration
Add environment variables to your `.env` file:
```env
OPACITY_TEAM_ID=f309ac8ae8a9a14a7e62cd1a521b1c5f
OPACITY_CLOUDFLARE_NAME=eigen-test
OPACITY_PROVER_URL=https://opacity-ai-zktls-demo.vercel.app
VERIFIABLE_INFERENCE_ENABLED=true
VERIFIABLE_INFERENCE_PROVIDER=opacity
```

## Integration
The adapter wraps AI model API calls to CloudFlare, performs MPC-TLS on logged responses, enabling verifiable API calls, proof generation, and verification of response authenticity.

## Example Usage
```typescript
import { OpacityAdapter } from '@elizaos/adapter-opacity';
import { VerifiableInferenceOptions } from '@elizaos/core';

// Initialize the adapter
const opacityAdapter = new OpacityAdapter(runtime, {
  teamId: process.env.OPACITY_TEAM_ID,
  teamName: process.env.OPACITY_CLOUDFLARE_NAME,
  baseUrl: process.env.OPACITY_PROVER_URL,
});

// Generate text with verifiable results
const result = await opacityAdapter.generateText('What is Rust?', 'gpt-4', options);

// Verify the proof
const isValid = await opacityAdapter.verifyProof(result);
```

## Links
MIT License
````

## File: summaries/plugins/open-weather.md
````markdown
# @elizaos/plugin-open-weather

## Purpose
A plugin for Eliza that enables weather checking using the OpenWeather API.

## Key Features
- Weather & temperature check for any specified city
- Supports temperatures, weather descriptions, wind speed, with possible add-ons for full API response

## Installation
```bash
npm install @elizaos/plugin-open-weather
```

## Configuration
1. Get your API key from OpenWeather
2. Set up environment variable: OPEN_WEATHER_API_KEY=your_api_key
3. Register the plugin in Eliza configuration:
```typescript
import { openWeatherPlugin } from '@elizaos/plugin-open-weather';

// In your Eliza configuration
plugins: [
  new openWeatherPlugin(),
  // ... other plugins
];
```

## Integration
The plugin responds to natural language queries about weather in specified cities and provides the GET_CURRENT_WEATHER action.

## Example Usage
```plaintext
"What's the current weather in London?"
"Show me weather in New York"
"Get the weather in Tokyo"
"What's the weather like?"
```

## Links
- [OpenWeather weather API Documentation](https://openweathermap.org/current)
````

## File: summaries/plugins/openai.md
````markdown
# @elizaos/plugin-openai

## Purpose
A plugin for OpenAI integration, providing automated text generation capabilities.

## Key Features
- Generate text using OpenAI's GPT models
- Customize prompts for context-aware content generation

## Installation
```bash
npm install @elizaos/plugin-openai
```

## Configuration
The plugin requires the following environment variable:
```env
OPENAI_API_KEY=your_openai_api_key
```

## Integration
Import and register the plugin in your Eliza configuration:
```typescript
import { openaiPlugin } from '@elizaos/plugin-openai';

export default {
  plugins: [openaiPlugin],
  // ... other configuration
};
```

## Example Usage
```typescript
const result = await generateTextAction.handler(runtime, message, state);
console.log(result.text); // Output generated by OpenAI
```
````

## File: summaries/plugins/para.md
````markdown
# @elizaos/plugin-para

## Purpose
A seamless integration between Para wallet infrastructure and Eliza OS, enabling autonomous agents to manage user wallets and transactions.

## Key Features
- 🔐 Full Para wallet integration with Eliza agents
- 💰 EVM-based transaction support using Viem
- 📝 Message signing capabilities
- 💼 Pre-generated wallet support
- 🔄 Seamless wallet claiming process
- 🛡️ Secure user share management
- 🌐 Multi-chain support (Ethereum, Polygon, Arbitrum, etc.)
- 📋 Built-in wallet status monitoring
- 🤖 Auto-configuration with Eliza agents
- 📱 Session management for persistent authentication

## Installation
```bash
# npm
npm install @elizaos/plugin-para

# bun
bun add @elizaos/plugin-para

# yarn
yarn add @elizaos/plugin-para

# bun
bun add @elizaos/plugin-para
```

## Configuration
1. Add required environment variables to your `.env` file
2. Register the plugin in your Eliza character configuration

## Integration
The plugin adds wallet creation, message signing, transaction signing, and wallet claiming capabilities to Eliza agents through actions, providers, and services.

## Example Usage
```typescript
// Creating wallets
await runtime.triggerAction('CREATE_PARA_WALLET', {
  type: 'EVM',
});

// Signing messages
await runtime.triggerAction('SIGN_PARA_MESSAGE', {
  walletId: 'wallet-id',
  message: 'Hello, World!',
});
```

## Links
- [Eliza Documentation](https://elizaos.github.io/eliza/)
- [Para Documentation](https://docs.getpara.com/)
- [Plugin Examples](https://github.com/elizaos/eliza/tree/main/examples/plugins)
- [Viem Documentation](https://viem.sh/)
````

## File: summaries/plugins/pdf.md
````markdown
# @elizaos/plugin-pdf

## Purpose
Core Node.js plugin for Eliza OS that provides essential services and actions for file operations, specifically focused on PDF processing.

## Key Features
- PDF text extraction and parsing

## Integration
Serves as a foundational component of Eliza OS, bridging core Node.js capabilities with the Eliza ecosystem.

## Services
- PdfService: Extracts and processes text content from PDF files
````

## File: summaries/plugins/primus.md
````markdown
# @elizaos/plugin-primus

## Purpose
A plugin to fully verify agent activities, including LLM access, actions, and interactions with external providers, powered by Primus' zkTLS protocol.

## Key Features
- Verification of inference from OpenAI's LLM
- Example for verifying actions (like posting tweets)
- Example to verify Bitcoin price fetched from Binance

## Installation
```bash
bun add @elizaos/plugin-primus
```

## Configuration
Add to .env file:
```
PRIMUS_APP_ID=your_app_id
PRIMUS_APP_SECRET=your_app_secret
VERIFIABLE_INFERENCE_ENABLED=true
VERIFIABLE_INFERENCE_PROVIDER=primus
```

Get credentials by:
1. Visit the Primus Developer Hub
2. Create a new project
3. Save Application ID and Secret Key

Add plugin to character file:
```json
{
  "plugins": [
    "@elizaos/plugin-primus"
  ]
}
```

## Integration
Implements `IVerifiableInferenceAdapter` through the `PrimusAdapter` class for verification of LLM interactions, actions, and provider data.

## Example Usage
- LLM inference verification using PrimusAdapter
- Verify BTC price from Binance
- Post verified tweets with price information

## Links
[Primus Developer Hub](https://dev.primuslabs.xyz/)
````

## File: summaries/plugins/pyth-data.md
````markdown
# Pyth Data Plugin for ElizaOS

## Purpose
A powerful plugin for interacting with Pyth Network price feeds and data streams, providing real-time access to cryptocurrency, forex, and other asset price data through a natural language interface.

## Key Features
- Real-time price feed streaming
- Latest price updates retrieval
- Publisher caps information
- Comprehensive price feed listings
- Natural language processing for price feed queries
- Automatic Price ID Detection
- Flexible Data Formats
- Granular Logging
- Error Handling
- Streaming Control

## Configuration
Requires a `.env` file with network configuration (mainnet or testnet), connection settings, runtime settings, and test price feed IDs. Configuration controls network endpoints, streaming behavior, retry logic, and logging.

## Integration
Connects with ElizaOS through a natural language interface allowing users to request real-time price data, updates, and information about available feeds.

## Example Usage
- "Stream BTC/USD price updates"
- "Latest price updates for [price feed ID]"
- "Get me all the published caps"
- "List all crypto price feeds"
````

## File: summaries/plugins/quai.md
````markdown
# @elizaos/plugin-quai

## Purpose
Quai Network integration plugin for Eliza OS that enables native token transfers and interactions with the Quai blockchain.

## Key Features
- Native QUAI token transfers
- Multiple network support
- Secure transaction signing
- Comprehensive error handling
- Built-in address validation
- Automatic gas estimation
- Real-time transaction status

## Installation
```bash
bun install @elizaos/plugin-quai
```

## Configuration
The plugin requires the following environment variables:
```env
QUAI_PRIVATE_KEY=your-private-key
QUAI_RPC_URL=https://rpc.quai.network  # or your preferred RPC endpoint
```

## Integration
The plugin provides core functionality for interacting with the Quai Network through a simple interface, enabling token transfers and blockchain interactions in ElizaOS.

## Example Usage
```typescript
import { quaiPlugin } from '@elizaos/plugin-quai';

// Send QUAI
const result = await eliza.execute({
  action: 'SEND_TOKEN',
  content: {
    recipient: '0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',
    amount: '10',
  },
});
```

## Links
- [Quai Network](https://qu.ai/)
- [Quai Documentation](https://docs.qu.ai/)
- [Quai Network GitHub](https://github.com/dominant-strategies)
````

## File: summaries/plugins/quick-intel.md
````markdown
# @elizaos/plugin-quickintel

## Purpose
A plugin for performing token security audits and market analysis within the ElizaOS ecosystem.

## Key Features
- Multi-chain support (EVM chains, Solana, etc.)
- Comprehensive security analysis
- Market data integration
- Natural language responses
- Detailed risk assessments

## Installation
```bash
bun install @elizaos/plugin-quickintel
```

## Configuration
### Environment Variables
```typescript
QUICKINTEL_API_KEY=<Your QuickIntel API Key>
```

### Client Configuration
Add the plugin to your character.json file:
```json
{
  "name": "YourCharacter",
  "plugins": ["quickintel"],
  "settings": {
    "QUICKINTEL_API_KEY": "your-api-key-here"
  }
}
```

## Integration
Processes natural language queries for token audits across multiple chains, combining QuickIntel's API for security analysis with market data from DexScreener.

## Example Usage
```typescript
'Can you check if this token is safe? 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on BSC';
'Analyze this token on Ethereum: 0x1234...';
'Is this Solana token safe? Hep4ZQ3MSSXFuLnT4baBFVBrC3677ntjrfaqE9zEt4rX';
```

## Links
https://docs.quickintel.io/quick-intel-scanner/supported-chains
````

## File: summaries/plugins/rabbit-trader.md
````markdown
# Rabbi Trader Plugin

## Purpose
An automated cryptocurrency trading plugin for Solana tokens with integrated trust scoring, market analysis, and Twitter notifications.

## Key Features
- Automated trading on Solana blockchain
- Real-time market data analysis using DexScreener
- Trust score evaluation for tokens
- Twitter integration for trade notifications
- Safety limits and risk management
- Simulation capabilities before executing trades
- Performance tracking and trade history
- Rate limiting and cache management

## Installation
```bash
npm install @elizaos/plugin-rabbi-trader
```

## Prerequisites
The following environment variables need to be configured:
- `WALLET_PRIVATE_KEY`: Your Solana wallet private key
- `WALLET_PUBLIC_KEY`: Your Solana wallet public address
- `SOLANA_RPC_URL`: Solana RPC endpoint (defaults to mainnet)
- `BIRDEYE_API_KEY`: API key for Birdeye data provider
- `TWITTER_ENABLED`: Enable/disable Twitter notifications
- `TWITTER_USERNAME`: Twitter username for notifications
- `DEXSCREENER_WATCHLIST_ID`: DexScreener watchlist identifier
- `COINGECKO_API_KEY`: CoinGecko API key for additional market data

## Configuration
Safety limits and trading parameters can be configured, including minimum trade amounts, maximum position size, slippage limits, trust scores, stop loss, take profit settings, check intervals, and position limits.

## Integration
The plugin integrates with multiple APIs including Birdeye API, DexScreener, Twitter, and Jupiter for token swaps.

## Example Usage
```typescript
import createRabbiTraderPlugin from '@elizaos/plugin-rabbi-trader';
import { IAgentRuntime } from '@elizaos/core';

const plugin = await createRabbiTraderPlugin((key: string) => process.env[key], runtime);

// Plugin will automatically start monitoring and trading if enabled
```
````

## File: summaries/plugins/router-nitro.md
````markdown
# @elizaos/plugin-router-nitro

## Purpose
The Router Nitro plugin enables seamless cross-chain token transfers and wallet management across blockchains within the ElizaOS ecosystem.

## Key Features
- Cross-chain token transfers
- Wallet management across blockchains
- Efficient bridging of tokens
- Monitoring wallet balances
- Real-time transaction processing
- Price tracking

## Installation
```bash
bun install @elizaos/plugin-router-nitro
```

## Configuration
The plugin requires the following environment variables:
```typescript
ROUTER_NITRO_EVM_PRIVATE_KEY=<Your EVM-compatible private key>
ROUTER_NITRO_EVM_ADDRESS=<Router Nitro EVM bridge address>
```

## Integration
Import the plugin into ElizaOS:
```typescript
import { nitroPlugin } from '@elizaos/plugin-router-nitro';
```

## Example Usage
The plugin responds to natural language commands like:
- 'Bridge 50 USDC from Ethereum to Polygon on address 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62'
- 'Send 1 ETH from Arb to Base'
````

## File: summaries/plugins/sei.md
````markdown
# @elizaos/plugin-sei

## Purpose
Sei Network plugin for Eliza OS that enables Eliza agents to perform actions on the Sei blockchain.

## Key Features
- Transfer SEI tokens to other `0x` or `sei` addresses
- Query wallet balances

## Installation
```bash
bun install @elizaos/plugin-sei
```

## Configuration
The plugin requires the following environment variables:
```env
SEI_PRIVATE_KEY= #your_private_key
SEI_NETWORK= #"mainnet","testnet", or "devnet"
```

## Integration
Import and register the plugin in your Eliza configuration:
```typescript
import { seiPlugin } from '@elizaos/plugin-sei';

export default {
  plugins: [seiPlugin],
  // ... other configuration
};
```

## Example Usage
Send Token:
```typescript
User: 'Send 1 SEI to 0xD5ca6eA5e33606554F746606157a7512FA738A12';
Assistant: "I'll send 1 SEI token now...";
```

Check Wallet Balance:
```typescript
User: "What's my wallet balance?";
Assistant: 'Your wallet contains 10.5 SEI ($5.25 USD)...';
```

## Links
[Sei Blockchain](https://sei.io/): The fastest EVM blockchain
````

## File: summaries/plugins/sgx.md
````markdown
# SGX Plugin for Eliza

## Purpose
The SGX Plugin for Eliza enhances the platform by providing Intel SGX attestation capabilities within trusted execution environments (TEEs).

## Key Features
- Intel SGX attestation for confidential computing
- Supports Trusted Execution Environment (TEE) implementation
- Integration with Gramine Library OS for unmodified applications
- SGX remote attestation generation

## Components
- **sgxAttestationProvider**: Responsible for generating SGX remote attestations within Gramine SGX environments

## Integration
The provider `sgxAttestationProvider` is registered into Eliza through plugin-sgx when the environment variable `SGX` is set to `1`.

## Example Usage
```typescript
const sgxAttestationProvider = new SgxAttestationProvider();
const sgxAttestation = await sgxAttestationProvider.generateAttestation(userReport);
```

## Quick Start
```bash
# Start Eliza in SGX with default character
SGX=1 make start
# Start with specific character
SGX=1 make start -- --character "character/trump.character.json"
```

## Links
[Gramine Library OS](https://github.com/gramineproject/gramine)
[Gramine installation options](https://gramine.readthedocs.io/en/latest/installation.html)
````

## File: summaries/plugins/solana-agent-kit.md
````markdown
# @elizaos/plugin-solana-agent-kit

## Purpose
A plugin that integrates Solana Agent Kit functionality into Eliza, enabling token operations, swaps, lending, and staking on Solana.

## Installation
```bash
bun add @elizaos/plugin-solana-agent-kit
```

## Configuration
### Required Environment Variables
```env
# Required: Either private key or public key
SOLANA_PRIVATE_KEY=your_private_key
# OR
SOLANA_PUBLIC_KEY=your_public_key

# Optional: Custom RPC URL (defaults to mainnet)
SOLANA_RPC_URL=your_rpc_url

# Required for TEE mode
WALLET_SECRET_SALT=your_salt  # Only if TEE_MODE is enabled
```

## Features
- **Token Operations**: Create tokens, transfer tokens, get token information, manage token supply
- **DeFi Operations**: Swap tokens via Jupiter, lend assets, stake tokens, create GibWork tasks

## Example Usage
### Token Creation
```plaintext
"Create token, name is Example Token, symbol is EXMPL, decimals is 9"
```

### Token Transfers
```plaintext
"Send 69 EZSIS to <wallet_address>"
```

### Token Swaps
```plaintext
"Swap 0.1 SOL for USDC"
```

## Dependencies
- @coral-xyz/anchor: 0.30.1
- @solana/spl-token: 0.4.9
- @solana/web3.js: 1.95.8
- solana-agent-kit: ^1.2.0
- bignumber.js: 9.1.2

## Links
[solana-agent-kit documentation](https://github.com/solana-labs/agent-kit)
````

## File: summaries/plugins/solana-agentkit.md
````markdown
# Plugin Solana AgentKit

## Purpose
A Solana integration plugin for AgentKit that enables interaction with the Solana blockchain.

## Key Features
- Solana wallet integration
- Transaction handling
- Account management
- RPC connection management
- Solana program interactions

## Integration
Connects with ElizaOS through the AgentKit framework to provide Solana blockchain functionality.
````

## File: summaries/plugins/solana-v2.md
````markdown
# Solana Plugin V2 for Eliza

## Purpose
Leverages the latest features of `@solana/web3.js` v2 to provide a modern, efficient, and composable solution for Solana integrations within the Eliza AI agent framework.

## Key Features
- Modern JavaScript and functional architecture using `@solana/web3.js` v2
- Compatibility with existing solana V1 plugins
- Common utilities including optimized transaction sending
- Trusted Execution Environment (TEE) support

## Integration
- Works within the Eliza AI agent framework
- Must be added to the `AgentRuntime` in `agent/src/index.ts`

## Current Functionality
- Orca liquidity position management
  - Automatically repositions liquidity positions based on price deviation thresholds
  - Maintains original position width
  - Repositions at user-defined intervals
  - Uses configurable slippage tolerance

## Example Usage
1. Set up environment variables (SOLANA_PRIVATE_KEY, SOLANA_PUBLIC_KEY, SOLANA_RPC_URL, OPENAI_API_KEY)
2. Update agent to include the plugin
3. Use LP Manager character
4. Run agent with: `bun start --characters="characters/lpmanager.character.json"`
5. Access web interface at localhost:3000

## Links
- [Transaction optimization details](https://orca-so.github.io/whirlpools/Whirlpools%20SDKs/Whirlpools/Send%20Transaction)
- [Transaction landing information](https://www.helius.dev/blog/how-to-land-transactions-on-solana#how-do-i-land-transactions)
````

## File: summaries/plugins/solana.md
````markdown
# @elizaos/plugin-solana

## Purpose
Core Solana blockchain plugin for Eliza OS that provides essential services and actions for token operations, trading, and DeFi integrations.

## Key Features
- Token Operations: Creation, transfers, balance management, portfolio analytics
- Trading Operations: Token swaps, order management, price monitoring, automated trading
- DeFi Integration: Liquidity analysis, market making, yield optimization, risk management
- Trust & Security: Trust scoring, risk assessment, performance tracking, simulation mode
- Security Features: Wallet management, permission scoping, TEE integration, trade limits

## Installation
```bash
npm install @elizaos/plugin-solana
```

## Configuration
```typescript
const solanaEnvSchema = {
  WALLET_SECRET_SALT: string(optional),
  WALLET_SECRET_KEY: string,
  WALLET_PUBLIC_KEY: string,
  SOL_ADDRESS: string,
  SLIPPAGE: string,
  SOLANA_RPC_URL: string,
  HELIUS_API_KEY: string,
  BIRDEYE_API_KEY: string,
};
```

## Integration
The plugin connects with ElizaOS through various services and actions, including TokenProvider, WalletProvider, and TrustScoreProvider, enabling token operations, swaps, transfers, and other Solana transactions.

## Example Usage
```typescript
import { solanaPlugin } from '@elizaos/plugin-solana';

// Initialize the plugin
const runtime = await initializeRuntime({
  plugins: [solanaPlugin],
});

// Execute a token swap
const result = await runtime.executeAction('EXECUTE_SWAP', {
  inputTokenSymbol: 'SOL',
  outputTokenSymbol: 'USDC',
  amount: 0.1,
});
```
````

## File: summaries/plugins/speech-tts.md
````markdown
# service-speech-tts

## Purpose
TTS transcription service with OpenAI + ElevenLabs
````

## File: summaries/plugins/spheron.md
````markdown
# Spheron Protocol Plugin for Eliza

## Purpose
This plugin integrates the Spheron Protocol SDK into the Eliza ecosystem, providing functionality for managing deployments, escrow operations, and lease management.

## Key Features
- **Escrow Operations**: Manage token deposits, withdrawals, and balance checks
- **Deployment Management**: Create, update, and manage deployments using ICL YAML

## Installation
```bash
npm install @elizaos/plugin-spheron
```

## Configuration
The plugin requires the following environment variables:
```env
PRIVATE_KEY=your_private_key
PROVIDER_PROXY_URL=your_provider_proxy_url
WALLET_ADDRESS=your_wallet_address
```

## Integration
Import and register the plugin with Eliza:
```typescript
import { spheronPlugin } from '@elizaos/plugin-spheron';
eliza.registerPlugin(spheronPlugin);
```

## Example Usage
### Escrow Operations:
```typescript
// Deposit tokens
await runtime.executeAction('ESCROW_OPERATION', {
  token: 'USDT',
  amount: 100,
  operation: 'deposit',
});
```

### Deployment Operations:
```typescript
// Create deployment
await runtime.executeAction('DEPLOYMENT_OPERATION', {
  operation: 'create',
  template: 'jupyter-notebook',
  customizations: {
    cpu: false,
    resources: {
      cpu: '4',
      memory: '8Gi',
      storage: '10Gi',
      gpu: '1',
      gpu_model: 'rtx4090',
    },
    duration: '1h',
    token: 'USDT',
  },
});
```
````

## File: summaries/plugins/squid-router.md
````markdown
# @elizaos/squid-router

## Purpose
This plugin adds Squid Router functionality to Eliza agents, allowing cross chain swaps between blockchains.

## Configuration
The plugin requires the following configuration:

```
# Squid Router
SQUID_SDK_URL=https://apiplus.squidrouter.com # Default: https://apiplus.squidrouter.com
SQUID_INTEGRATOR_ID= # get integrator id through https://docs.squidrouter.com/
SQUID_EVM_ADDRESS=
SQUID_EVM_PRIVATE_KEY=
```

## Integration
It enables cross chain swaps between blockchains, currently supporting only swaps between EVM chains with plans to add Solana and Cosmos ecosystem in the future.

## Actions
### Cross Chain Swap
name: `X_CHAIN_SWAP`
Perform cross chain swaps for both native and ERC20 tokens supported by Squid Router.
Message sample: `Bridge 1 ETH from Ethereum to Base`

## Links
[Squid Router documentation](https://docs.squidrouter.com/)
````

## File: summaries/plugins/stargaze.md
````markdown
# Plugin Stargaze

## Purpose
A plugin for fetching NFT data from the Stargaze API.

## Key Features
Provides a simple interface to get NFT data from Stargaze collections.

## Installation
```bash
bun add @elizaos/plugin-stargaze
```

## Configuration
Set up your environment with the required Stargaze API endpoint.

| Variable Name       | Description                   |
| ------------------- | ----------------------------- |
| `STARGAZE_ENDPOINT` | Stargaze GraphQL API endpoint |

## Integration
Integrates with Stargaze's GraphQL API to fetch the latest NFTs from collections.

## Example Usage
```typescript
import { stargazePlugin } from '@elizaos/plugin-stargaze';

// Initialize the plugin
const plugin = stargazePlugin;

// The plugin provides the GET_LATEST_NFT action which can be used to fetch NFTs
// Example: "Show me the latest NFT from ammelia collection"
```

## Links
License: MIT
````

## File: summaries/plugins/starknet.md
````markdown
# @elizaos/plugin-starknet

## Purpose
Core Starknet blockchain plugin for Eliza OS that provides essential services and actions for token operations, trading, and DeFi integrations.

## Key Features
- **Token Operations**: Token creation, transfers, balance management, portfolio analytics
- **Trading Operations**: Token swaps, order management, price monitoring, trust score analysis
- **DeFi Integration**: Liquidity management, yield optimization, risk assessment, performance tracking

## Configuration
The plugin requires the following environment variables:
```typescript
STARKNET_ADDRESS = your_starknet_address;
STARKNET_PRIVATE_KEY = your_private_key;
STARKNET_RPC_URL = your_rpc_url; // e.g. https://rpc.starknet.lava.build
```

## Integration
Serves as a foundational component of Eliza OS, bridging Starknet blockchain capabilities with the Eliza ecosystem, enabling both automated and user-directed interactions.

## Example Usage
```typescript
// Deploy token
const result = await runtime.executeAction('DEPLOY_STARKNET_UNRUGGABLE_MEME_TOKEN', {
  name: 'TokenName',
  symbol: 'TKN',
  owner: 'OwnerAddressHere',
  initialSupply: '1000000000000000000',
});

// Transfer tokens
const result = await runtime.executeAction('TRANSFER_TOKEN', {
  tokenAddress: 'TokenAddressHere',
  recipient: 'RecipientAddressHere',
  amount: '1000',
});
```

## Links
- [Starknet Documentation](https://docs.starknet.io/)
- [Starknet Developer Portal](https://starknet.io/developers)
- [Starknet Network Dashboard](https://starknet.io/dashboard)
- [Starknet GitHub Repository](https://github.com/starkware-libs/starknet)
````

## File: summaries/plugins/story.md
````markdown
# ElizaOS Story Protocol Plugin

## Purpose
A plugin for ElizaOS that enables interaction with Story Protocol - a comprehensive IP management system on the blockchain that allows creators to register, license, and manage their intellectual property assets.

## Key Features
- IP Registration: Register creative works as IP assets on Story Protocol
- License Management: Attach license terms to IP assets with customizable commercial terms
- IP Licensing: Mint license tokens for IP assets
- Asset Information: Fetch details about IP assets and available licenses
- Blockchain Integration: Built-in wallet provider for Odyssey testnet

## Installation
Install via npm:
```bash
npm install @elizaos-plugins/plugin-story
```
Or using bun:
```bash
bun add @elizaos-plugins/plugin-story
```

## Configuration
Add to ElizaOS agent configuration:
```javascript
// agent.config.js
export default {
  // Other ElizaOS configuration
  plugins: ['story'],
  settings: {
    STORY_PRIVATE_KEY: '0x...', // Your Story Protocol private key
    PINATA_JWT: '...', // Your Pinata JWT token
  },
};
```

## Integration
Integrates with Story Protocol on the Odyssey testnet, providing on-chain IP registration, programmable licensing with configurable commercial terms, creator attribution, revenue sharing, and IP relationship tracking.

## Example Usage
Register IP assets:
```
User: I'd like to register a short story I wrote called "The Digital Forest"
Agent: Great! What's the description for your IP?
User: It's a sci-fi story about a forest that exists in cyberspace
Agent: I'll register "The Digital Forest" as an IP asset on Story Protocol.
*Agent registers IP and provides transaction details*
```

## Links
- [Story Protocol Documentation](https://docs.storyprotocol.xyz)
- [Odyssey Testnet Explorer](https://odyssey.storyscan.xyz)
- [Pinata IPFS](https://www.pinata.cloud/)
````

## File: summaries/plugins/sui.md
````markdown
# @elizaos/plugin-sui

## Purpose
Core Sui blockchain plugin for Eliza OS that provides essential services and actions for token operations and wallet management.

## Key Features
- Transfer SUI tokens between wallets
- Query wallet balances and portfolio values
- Track token prices and valuations
- Manage wallet interactions with the Sui network

## Installation
```bash
npm install @elizaos/plugin-sui
```

## Configuration
Requires environment variables:
```env
SUI_PRIVATE_KEY=your_private_key
SUI_NETWORK=mainnet|testnet|devnet|localnet
```

## Integration
Import and register the plugin in Eliza configuration:
```typescript
import { suiPlugin } from '@elizaos/plugin-sui';

export default {
  plugins: [suiPlugin],
  // ... other configuration
};
```

## Example Usage
Send tokens:
```typescript
User: 'Send 1 SUI to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0';
Assistant: "I'll send 1 SUI token now...";
```

Check balance:
```typescript
User: "What's my wallet balance?";
Assistant: 'Your wallet contains 10.5 SUI ($42.00 USD)...';
```

## Links
- [Sui Documentation](https://docs.sui.io/)
- [Sui Developer Portal](https://sui.io/developers)
- [Sui Network Dashboard](https://suiscan.xyz/)
- [Sui GitHub Repository](https://github.com/MystenLabs/sui)
````

## File: summaries/plugins/suno.md
````markdown
# @elizaos/plugin-suno

## Purpose
A Suno AI music generation plugin for ElizaOS that enables AI-powered music creation and audio manipulation.

## Key Features
- Generate music from text prompts with fine-tuned parameters
- Create custom music with advanced control over style, tempo, and key
- Extend existing audio tracks

## Installation
```
npm install @elizaos/plugin-suno
```

## Configuration
```typescript
sunoProvider.configure({
  apiKey: 'your-suno-api-key',
});
```

## Integration
Register the plugin with ElizaOS:
```typescript
import { sunoPlugin } from '@elizaos/plugin-suno';
import { Eliza } from '@elizaos/core';

const eliza = new Eliza();
eliza.registerPlugin(sunoPlugin);
```

## Example Usage
```typescript
// Basic music generation
await eliza.execute('suno.generate-music', {
  prompt: 'An upbeat electronic dance track with energetic beats',
  duration: 30,
  temperature: 1.0,
});

// Custom music generation
await eliza.execute('suno.custom-generate-music', {
  prompt: 'A melodic piano piece with soft strings',
  style: 'classical',
  bpm: 120,
  key: 'C',
  mode: 'major',
});

// Extend existing audio
await eliza.execute('suno.extend-audio', {
  audio_id: 'your-audio-id',
  duration: 60,
});
```

## Links
Original Plugin: https://github.com/gcui-art/suno-api?tab=readme-ov-file
````

## File: summaries/plugins/tee-log.md
````markdown
# TEE Log Plugin for Eliza

## Purpose
Enhances logging capabilities by providing a structured way to generate, store and verify TEE (Trusted Execution Environment) logs for agents, ensuring sensitive interactions are securely logged with tamper-resistant records.

## Requirements
- Intel SGX (Gramine): enable plugin-sgx in Eliza runtime (automatic in SGX environments)
- Intel TDX (dstack): enable plugin-tee in Eliza runtime

## Configuration
Enable TEE logging in .env file:
```env
TEE_LOG_ENABLED=true
```

## Integration
- Import the service: `import { ServiceType, ITeeLogService } from '@elizaos/core'`
- Add plugin-tee-log to dependencies of target plugin
- Get service instance: `const teeLogService = runtime.getService<ITeeLogService>(ServiceType.TEE_LOG).getInstance()`
- Log interactions: `teeLogService.log(runtime.agentId, message.roomId, message.userId, 'Action:TYPE', 'content')`

## Storage
Logs stored in SQLite database at `./data/tee_log.sqlite`. Production environments must use encrypted file systems for security.
````

## File: summaries/plugins/tee-marlin.md
````markdown
# Marlin TEE Plugin

## Purpose
A plugin for making agents on Eliza verifiable through the use of Trusted Execution Environments (TEEs).

## Configuration
Add the following to your `.env` file to enable the plugin:
```
TEE_MARLIN=yes
```

Optional configuration for the attestation server:
```
# Optional, default is http://127.0.0.1:1350
TEE_MARLIN_ATTESTATION_ENDPOINT="http://127.0.0.1:1350"
```

## Integration
The plugin leverages the Marlin Oyster platform and SDKs to provide the REMOTE_ATTESTATION action that fetches attestations from a server, allowing users to verify if an agent is running inside a TEE environment.

## Example Usage
```
You: attest yourself
```
The agent will respond with an attestation string that verifies its TEE environment.

## Links
- [Marlin Oyster](https://docs.marlin.org/user-guides/oyster/)
- [SDKs](https://github.com/marlinprotocol/oyster-monorepo)
- [Mock attestation server](https://github.com/marlinprotocol/oyster-monorepo/tree/master/attestation/server-custom-mock)
````

## File: summaries/plugins/tee-verifiable-log.md
````markdown
# Build Plugin

## Purpose
A plugin for building and testing code in ElizaOS.

## Configuration
This plugin depends on plugin-tee. For local testing, a TEE simulator can be set up using Docker. When using the provider through the runtime environment, configure settings like TEE_MODE, WALLET_SECRET_SALT, and VLOG.

## Example Usage
```
bun clean
bun install  or  bun install --no-frozen-lockfile
bun build
```

For testing:
```
bun test
```
````

## File: summaries/plugins/tee.md
````markdown
# @elizaos/plugin-tee

## Purpose
A plugin for handling Trusted Execution Environment (TEE) operations, providing secure key derivation and remote attestation capabilities.

## Key Features
- Generate secure keys within a TEE environment
- Derive Ed25519 keypairs for Solana
- Derive ECDSA keypairs for Ethereum
- Generate remote attestation quotes
- Manage wallet interactions with TEE-derived keys

## Installation
```bash
npm install @elizaos/plugin-tee
```

## Configuration
Environment variables:
```env
TEE_MODE=LOCAL|DOCKER|PRODUCTION
WALLET_SECRET_SALT=your_secret_salt  # Required for single agent deployments
DSTACK_SIMULATOR_ENDPOINT=your-endpoint-url  # Optional, for simulator purposes
```

## Integration
Import and register in Eliza configuration:
```typescript
import { teePlugin } from '@elizaos/plugin-tee';

export default {
  plugins: [teePlugin],
  // ... other configuration
};
```

## Example Usage
```typescript
import { DeriveKeyProvider, RemoteAttestationProvider } from '@elizaos/plugin-tee';

// Key derivation
const provider = new DeriveKeyProvider();
const solanaKeypair = await provider.deriveEd25519Keypair('/path/to/derive', 'subject-identifier');
const evmKeypair = await provider.deriveEcdsaKeypair('/path/to/derive', 'subject-identifier');

// Remote attestation
const raProvider = new RemoteAttestationProvider();
const attestation = await raProvider.generateAttestation('your-report-data');
```
````

## File: summaries/plugins/thirdweb.md
````markdown
# ai16z/plugin-thirdweb

## Purpose
This plugin provides access to thirdweb's Nebula AI interface.

## Configuration
By default, the thirdweb plugin is enabled. Add your secret key to the `.env` file:
```env
THIRDWEB_SECRET_KEY=your-thirdweb-secret-key-here
```

## Integration
Enables interaction with the thirdweb Nebula natural language interface to analyze smart contracts, read contract data, decode interactions, access blockchain information, track transactions, look up token information, and retrieve wallet balances.

## Example Usage
```
What is the ETH balance for 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
```

```
What is the total NFT supply for 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D?
```

```
Does 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045 hold USDC on Base?
```

```
What is the address of USDC on Ethereum?
```

## Links
https://portal.thirdweb.com/nebula
````

## File: summaries/plugins/ton.md
````markdown
# @elizaos/plugin-ton

## Purpose
A plugin for handling TON (Telegram Open Network) blockchain operations, providing wallet management and transfer capabilities.

## Key Features
- Manage TON wallets and key derivation
- Execute secure token transfers
- Query wallet balances and portfolio information
- Format and cache transaction data
- Interface with TON blockchain via RPC endpoints
- Connect TON wallets using TonConnect protocol
- Support multiple wallet applications (like Tonkeeper)
- Support QR Code scanning connection
- Batch transfers of NFTs, Jettons and TON in a single transaction
- On-demand wallet creation with encrypted key storage
- Auction interactions

## Installation
```bash
npm install @elizaos/plugin-ton
```

## Configuration
Environment variables:
```env
TON_PRIVATE_KEY=your_mnemonic_phrase
TON_RPC_URL=your_rpc_endpoint
TON_RPC_API_KEY=
TON_MANIFEST_URL=your_manifest_url
TON_BRIDGE_URL=your_bridge_url
```

## Integration
Import and register in Eliza configuration:
```typescript
import { tonPlugin } from '@elizaos/plugin-ton';

export default {
  plugins: [tonPlugin],
  // ... other configuration
};
```

## Example Usage
```typescript
// WalletProvider
const provider = await initWalletProvider(runtime);
const balance = await provider.getWalletBalance();
const portfolio = await provider.getFormattedPortfolio(runtime);

// Transfer
const action = new TransferAction(walletProvider);
const hash = await action.transfer({
  recipient: 'EQCGScrZe1xbyWqWDvdI6mzP-GAcAWFv6ZXuaJOuSqemxku4',
  amount: '1.5',
});
```
````

## File: summaries/plugins/trikon.md
````markdown
# @elizaos/plugin-trikon

## Purpose
Trikon plugin for Eliza OS that provides token transfer functionality as a Proof of Concept (POC) implementation for Trikon token transfers within the Eliza ecosystem.

## Key Features
- Basic token transfer capabilities
- Wallet management

## Installation
```
bun add @elizaos/plugin-trikon
```

## Configuration
The plugin requires the following environment variables:
- `TRIKON_WALLET_ADDRESS`: Your Trikon wallet address (must be a valid 64-character hex string starting with '0x')
- `TRIKON_INITIAL_BALANCE`: (Optional) The initial balance for the wallet. Defaults to "0" if not provided.

## Integration
```typescript
import { trikonPlugin } from '@elizaos/plugin-trikon';

const eliza = new ElizaOS({
  plugins: [trikonPlugin],
});
```
````

## File: summaries/plugins/trustdb.md
````markdown
# @elizaos/plugin-trustdb

## Purpose
A plugin for managing trust scores and performance metrics in a secure database, providing recommender tracking and token performance analysis capabilities.

## Key Features
- Track and manage recommender trust scores
- Monitor token performance metrics
- Record and analyze trading performance
- Maintain historical metrics data
- Handle transaction records and validations

## Installation
```bash
npm install @elizaos/plugin-trustdb
```

## Configuration
```typescript
import { TrustScoreDatabase } from '@elizaos/plugin-trustdb';
import Database from 'better-sqlite3';

const db = new Database('path/to/database.sqlite');
const trustDB = new TrustScoreDatabase(db);
```

## Example Usage
```typescript
import { TrustScoreDatabase } from '@elizaos/plugin-trustdb';

// Initialize database
const trustDB = new TrustScoreDatabase(db);

// Add a recommender
const recommender = {
  id: 'uuid',
  address: 'wallet-address',
  telegramId: 'telegram-id',
};
trustDB.addRecommender(recommender);

// Track token performance
const performance = {
  tokenAddress: 'token-address',
  priceChange24h: 10.5,
  volumeChange24h: 25.3,
  // ... other metrics
};
trustDB.upsertTokenPerformance(performance);
```
````

## File: summaries/plugins/trustgo.md
````markdown
# @toddli/plugin-trustgo

## Purpose
The TrustGo plugin enables fetching EVM account information from the TrustGo website and facilitates the minting of MEDIA score attestations.

## Key Features
- Login to TrustGo Website: Securely authenticate with TrustGo.
- Fetch Multi-Chain MEDIA Score: Retrieve MEDIA scores across multiple chains.
- Fetch User Attestations: Access user attestations.
- Mint L2 MEDIA Attestation: Mint MEDIA attestations on Layer 2.

## Installation
```bash
bun install @toddli/plugin-trustgo
```

## Configuration
### Dependencies
```
@elizaos/core
@elizaos/plugin-evm
```

### Required Environment Variables
```env
# Required
EVM_PRIVATE_KEY=your-private-key
```

## Integration
The TrustGo Provider integrates the EVM Wallet Provider, performing authentication, fetching MEDIA scores from multiple blockchain networks, displaying attestations, and minting attestations.

## Example Usage
```typescript
go trustgo
Show my onchain Reputation
show my attestations
mint my linea media score
```

## Links
https://trustgo.trustalabs.ai/
````

## File: summaries/plugins/tts.md
````markdown
# @elizaos/plugin-tts

## Purpose
A plugin for text-to-speech(TTS) generation using the FAL.ai API within the ElizaOS ecosystem.

## Key Features
- Automatic language detection
- Voice selection based on detected language
- Local file caching
- Progress tracking
- Error handling

## Installation
```bash
bun install @elizaos/plugin-tts
```

## Configuration
The plugin requires the following environment variable:
```typescript
FAL_API_KEY=<Your FAL.ai API key>
```

## Integration
Import the plugin with:
```typescript
import { TTSGenerationPlugin } from '@elizaos/plugin-tts';
```

## Example Usage
The plugin responds to natural language commands like:
- 'Generate TTS of Hello World'
- 'Create a TTS for Welcome to ElizaOS'
- 'Make a TTS saying [your text]'

## Links
- [FAL.ai Documentation](https://fal.ai/docs)
- [ElizaOS Documentation](https://elizaos.github.io/eliza/)
````

## File: summaries/plugins/twilio.md
````markdown
# @elizaos/plugin-twilio

## Purpose
A Twilio plugin for ElizaOS that enables SMS and voice call capabilities.

## Key Features
- SMS Messaging: Send, receive, and respond to SMS messages with natural conversation handling
- Voice Calls: Make and receive calls with natural voice conversations using ElevenLabs and speech recognition

## Installation
```bash
bun add @elizaos-plugins/plugin-twilio
```

## Configuration
1. Add plugin to character file with settings for actions and voice
2. Set environment variables in `.env` file (Twilio credentials, webhook configuration, ElevenLabs API key)
3. Configure webhooks in Twilio Console for voice and SMS
4. For local development, use ngrok to expose webhook endpoints

## Integration
- Connects with ElizaOS to enable SMS and voice communication
- Uses ElevenLabs for voice synthesis
- Uses Twilio's speech recognition capabilities for speech-to-text

## Example Usage
SMS Commands:
```
Send an SMS to +1234567890 saying Hello world!
Send SMS to +1234567890 about the weather forecast
```

Voice Call Commands:
```
Call +1234567890 and tell them about the latest updates
Call +1234567890 to say that we need to schedule a meeting
```
````

## File: summaries/plugins/twitter.md
````markdown
# @elizaos/plugin-twitter

## Purpose
A plugin for Twitter/X integration, providing automated tweet posting capabilities with character-aware content generation.

## Key Features
- Compose context-aware tweets
- Post tweets to Twitter/X platform
- Handle authentication and session management
- Support premium Twitter features
- Manage tweet length restrictions

## Installation
```bash
npm install @elizaos/plugin-twitter
```

## Configuration
Requires environment variables:
```env
TWITTER_USERNAME=your_username
TWITTER_PASSWORD=your_password
TWITTER_EMAIL=your_email              # Optional: for 2FA
TWITTER_2FA_SECRET=your_2fa_secret    # Optional: for 2FA
TWITTER_PREMIUM=false                 # Optional: enables premium features
TWITTER_DRY_RUN=false                # Optional: test without posting
```

## Integration
Import and register the plugin in Eliza configuration:
```typescript
import { twitterPlugin } from '@elizaos/plugin-twitter';

export default {
  plugins: [twitterPlugin],
  // ... other configuration
};
```

## Example Usage
```typescript
import { postAction } from '@elizaos/plugin-twitter';

// Tweet will be composed based on context and character limits
const result = await postAction.handler(runtime, message, state);

// Post with automatic content generation
await postAction.handler(runtime, message, state);

// Dry run mode (for testing)
process.env.TWITTER_DRY_RUN = 'true';
await postAction.handler(runtime, message, state);
```
````

## File: summaries/plugins/udio.md
````markdown
# @elizaos/plugin-udio

## Purpose
A Udio AI music generation plugin for ElizaOS that enables AI-powered music creation and audio manipulation.

## Key Features
- Generate music from text prompts with fine-tuned parameters
- Create custom music with advanced control over style and lyrics
- Extend existing audio tracks with AI-powered continuation

## Installation
```
npm install @elizaos/plugin-udio
```

## Configuration
Configure your Udio authentication token in your environment:
```
UDIO_AUTH_TOKEN=your-udio-auth-token
```

## Integration
Register the plugin with ElizaOS:
```typescript
import { udioPlugin } from '@elizaos/plugin-udio';
import { Eliza } from '@elizaos/core';

const eliza = new Eliza();
eliza.registerPlugin(udioPlugin);
```

## Example Usage
Generate music:
```typescript
await eliza.execute('udio.generate', {
  prompt: 'An upbeat electronic dance track with energetic beats',
  seed: 12345,
  customLyrics: 'Your custom lyrics here',
});
```

Extend audio:
```typescript
await eliza.execute('udio.extend', {
  prompt: 'Continue with similar style',
  audioConditioningPath: 'path/to/audio.mp3',
  audioConditioningSongId: 'original-song-id',
  cropStartTime: 30,
  seed: 12345,
  customLyrics: 'Additional lyrics for the extension',
});
```

## Links
License: MIT
````

## File: summaries/plugins/viction.md
````markdown
# @elizaos/plugin-viction

## Purpose
Core Viction blockchain plugin for Eliza OS that provides essential services and actions for token operations, trading, and DeFi integrations.

## Key Features
- **Token Information**: Provide Viction information
- **Token Transfers**: Send and receive tokens securely native and non-native

## Installation
```bash
npm install @elizaos/plugin-viction
```

## Configuration
```typescript
const victionEnvSchema = {
  VICTION_ADDRESS: string,
  VICTION_PRIVATE_KEY: string,
  VICTION_RPC_URL: string,
};
```

## Integration
Serves as a foundational component of Eliza OS, bridging Viction blockchain capabilities with the Eliza ecosystem.

## Example Usage
```typescript
import { victionPlugin } from '@elizaos/plugin-viction';

// Initialize the plugin
const runtime = await initializeRuntime({
  plugins: [victionPlugin],
});

// Get Viction information
const result = await runtime.executeAction('GIVE_VICTION_INFOMATION', {});

// Transfer VIC
const result = await runtime.executeAction('SEND_VIC', {
  recipient: 'RecipientAddressHere',
  amount: '1000',
});

// Transfer tokens
const result = await runtime.executeAction("SEND_TOKEN", {
    recipient: "RecipientAddressHere",
    tokenAddress: "TokenAddressHere"
    amount: "1000",
});
```
````

## File: summaries/plugins/video-generation.md
````markdown
# @elizaos/plugin-video-generation

## Purpose
A plugin for AI-powered video generation using Luma AI, providing automated video creation capabilities from text prompts.

## Key Features
- Generate videos from text descriptions
- Handle video generation requests through Luma AI
- Manage API authentication and responses
- Cache and serve generated videos
- Monitor generation progress

## Installation
```bash
npm install @elizaos/plugin-video-generation
```

## Configuration
The plugin requires the following environment variables:
```env
LUMA_API_KEY=your_luma_api_key    # Required: API key for Luma AI
```

## Integration
Import and register the plugin in your Eliza configuration:
```typescript
import { videoGenerationPlugin } from '@elizaos/plugin-video-generation';

export default {
  plugins: [videoGenerationPlugin],
  // ... other configuration
};
```

## Example Usage
```typescript
// Basic video generation
const videoPrompt = 'Create a video of a futuristic city at night';
const result = await generateVideo(videoPrompt, runtime);

// With callback handling
videoGeneration.handler(
  runtime,
  {
    content: { text: videoPrompt },
  },
  state,
  {},
  (response) => {
    console.log('Generation status:', response);
  }
);
```
````

## File: summaries/plugins/video.md
````markdown
# @elizaos/plugin-video Video Service

## Purpose
The VideoService provides comprehensive video processing capabilities with a focus on efficient handling and transcription.

## Key Features
- Video Download: Supports both YouTube videos and direct MP4 URLs
- Format Handling: Automatic detection/conversion, MP4 to MP3 conversion, support for YouTube and Vimeo
- Transcription Pipeline: Extracts manual subtitles, falls back to automatic captions or audio transcription
- Performance Optimizations: Queue-based processing, built-in caching, efficient temp file management
- Error Handling: Graceful fallbacks, comprehensive error reporting, automatic cleanup

## Example Usage
```typescript
const videoService = runtime.getService<IVideoService>(ServiceType.VIDEO);

// Process a video URL
const result = await videoService.processVideo(videoUrl, runtime);
// Returns: Media object with id, url, title, source, description, and transcript
```
````

## File: summaries/plugins/web-search.md
````markdown
# @elizaos/plugin-web-search

## Purpose
A plugin for powerful web search capabilities, providing efficient search query handling and result processing through a customizable API interface.

## Key Features
- Execute web search queries with customizable parameters
- Process and format search results
- Handle search API authentication
- Manage token limits and response sizes
- Optimize query performance

## Installation
```bash
bun install @elizaos/plugin-web-search
```

## Configuration
The plugin requires the following environment variables:
```env
TAVILY_API_KEY=your_api_key    # Required: API key for search service
```

## Integration
Import and register the plugin in your Eliza configuration:
```typescript
import { webSearchPlugin } from '@elizaos/plugin-web-search';

export default {
  plugins: [webSearchPlugin],
  // ... other configuration
};
```

## Example Usage
```typescript
// Basic search
const searchQuery = 'Latest developments in quantum computing';
const results = await generateWebSearch(searchQuery, runtime);

// With formatted response
if (results && results.results.length) {
  const formattedResponse = `${results.answer}\n\nFor more details, check out:\n${results.results
    .map((result, index) => `${index + 1}. [${result.title}](${result.url})`)
    .join('\n')}`;
}
```
````

## File: summaries/plugins/whatsapp.md
````markdown
# @elizaos/plugin-whatsapp

## Purpose
A plugin for integrating WhatsApp Cloud API with your application, providing comprehensive messaging capabilities and webhook handling.

## Key Features
- Send text messages
- Send template messages
- Webhook verification
- Webhook event handling
- Message status updates

## Installation
```bash
npm install @elizaos/plugin-whatsapp
```

## Configuration
```env
WHATSAPP_ACCESS_TOKEN=your_access_token       # Required: WhatsApp Cloud API access token
WHATSAPP_PHONE_NUMBER_ID=your_phone_number_id # Required: WhatsApp business phone number ID
WHATSAPP_WEBHOOK_TOKEN=your_webhook_token     # Optional: Webhook verification token
WHATSAPP_BUSINESS_ID=your_business_id        # Optional: Business account ID
```

## Example Usage
```typescript
// Basic setup
import { WhatsAppPlugin } from '@elizaos/plugin-whatsapp';

const whatsappPlugin = new WhatsAppPlugin({
  accessToken: 'your_access_token',
  phoneNumberId: 'your_phone_number_id',
  webhookVerifyToken: 'your_webhook_verify_token',
  businessAccountId: 'your_business_account_id',
});

// Send a text message
await whatsappPlugin.sendMessage({
  type: 'text',
  to: '1234567890',
  content: 'Hello from WhatsApp!',
});

// Verify webhook
app.get('/webhook', (req, res) => {
  const verified = await whatsappPlugin.verifyWebhook(req.query['hub.verify_token']);
  if (verified) {
    res.send(req.query['hub.challenge']);
  } else {
    res.sendStatus(403);
  }
});
```
````

## File: summaries/plugins/youtube-to-text.md
````markdown
# @elizaos/plugin-youtube-to-text

## Purpose
The Youtube to text Plugin allows users to retrieve a text output of a Youtube video.

## Key Features
- Converts YouTube video links into text format using OpenAI's Whisper model
- Leverages Whisper's advanced AI for precise and reliable transcription
- Extracts and saves the video's audio as a WAV and MP3 file under the agent/data folder

## Installation
```bash
bun install @elizaos/plugin-youtube-to-text
```

## Development
1. Clone the repository
2. Install dependencies:
```bash
bun install
```
3. Build the plugin:
```bash
bun run build
```
4. Run tests:
```bash
bun test
```
````

## File: summaries/plugins/zapper.md
````markdown
# @elizaos/plugin-zapper

## Purpose
A plugin for Eliza that allows users to fetch portfolio data using the Zapper API.

## Key Features
- Get portfolio data from wallet addresses on networks supported by the Zapper API
- Get portfolio data from addresses attached to Farcaster profiles

## Installation
```bash
npm install @elizaos/plugin-zapper
```

## Configuration
1. Get your API key from Zapper
2. Set up environment variables: `ZAPPER_API_KEY=your_api_key`
3. Register the plugin in your Eliza configuration:
```typescript
import { zapperPlugin } from '@elizaos/plugin-zapper';

// In your Eliza configuration
plugins: [
  zapperPlugin,
  // ... other plugins
];
```

## Integration
The plugin responds to natural language queries about wallet data with two main actions: "portfolio" to fetch current portfolio of provided addresses, and "farcasterPortfoio" to fetch portfolios of addresses attached to Farcaster profiles.

## Example Usage
```plaintext
"Show me the holdings of @vitalik.eth"
"Show me the portfolio of these wallets 0xd8d...045, 0xadd...077"
"Get wallet holdings for HN7cA...WrH"
```

## Links
- [Zapper API Documentation](https://protocol.zapper.xyz/docs/api/)
````

## File: summaries/plugins/zerion.md
````markdown
# @elizaos/plugin-zerion

## Purpose
A plugin for Eliza that enables fetching wallet portfolio and position data using the Zerion API.

## Key Features
- Real-time wallet portfolio data
- Detailed token positions and balances
- Chain distribution analysis
- Portfolio value changes tracking
- Support for all EVM-compatible chains
- Natural language processing for wallet queries

## Installation
```bash
npm install @elizaos/plugin-zerion
```

## Configuration
1. Get your API key from Zerion
2. Set environment variables: ZERION_API_KEY
3. Register the plugin in your Eliza configuration:
```typescript
import { zerionPlugin } from '@elizaos/plugin-zerion';

// In your Eliza configuration
plugins: [
  zerionPlugin,
  // ... other plugins
];
```

## Integration
The plugin responds to natural language queries about wallet data through actions like getWallet_portfolio and getWallet_positions.

## Example Usage
```plaintext
"Show me the portfolio for 0x123...abc"
"What are the token positions in 0x456...def?"
"Get wallet holdings for 0x789...ghi"
```

## Links
- [Zerion API Documentation](https://developers.zerion.io/reference/intro)
- [GitHub Repository](https://github.com/elizaos/eliza/tree/main/packages/plugin-zerion)
````

## File: summaries/plugins/zilliqa.md
````markdown
# @elizaos/plugin-zilliqa

## Purpose
A plugin for integrating Zilliqa blockchain capabilities through the GOAT (Great Onchain Agent Toolkit) framework within the ElizaOS ecosystem.

## Installation
```bash
bun install @elizaos/plugin-zilliqa
```

## Configuration
### Environment Variables
```typescript
EVM_PRIVATE_KEY=<Your EVM wallet private key>
EVM_PROVIDER_URL=<Your RPC provider URL (e.g., Infura, Alchemy)>
ENABLE_ZILLIQA=1
```

## Integration
This plugin integrates the GOAT Zilliqa plugin and wallet with Eliza, allowing blockchain tools such as wallets, token handling, and smart contract interactions.

## Common Issues & Troubleshooting
1. **Agent not executing an action**:
   - Confusion with EVM Plugin action names
   - Character prompts affecting action execution

2. **Wallet Connection Issues**
   - Private key formatting
   - RPC endpoint availability
   - Network balance

3. **Transaction Issues**
   - Gas availability
   - Network congestion
   - Transaction parameters

## Links
[GOAT](https://ohmygoat.dev/)
[Chains supported](https://ohmygoat.dev/chains-wallets-plugins)
[Plugins supported](https://ohmygoat.dev/chains-wallets-plugins)
````

## File: summaries/plugins/zksync-era.md
````markdown
# @elizaos/plugin-zksync-era

## Purpose
A plugin for integrating ZKSync Era blockchain operations with your application, providing token transfer capabilities and transaction management.

## Key Features
- Execute token transfers on ZKSync Era
- Handle smart account operations
- Manage transaction signing and submission
- Support multiple token standards
- Process transaction receipts and confirmations

## Installation
```bash
npm install @elizaos/plugin-zksync-era
```

## Configuration
The plugin requires the following environment variables:
```env
ZKSYNC_ADDRESS=your_address           # Required: Your ZKSync wallet address
ZKSYNC_PRIVATE_KEY=your_private_key  # Required: Your wallet's private key
```

## Example Usage
```typescript
// Initialize plugin
const zksync = zksyncEraPlugin;

// Execute transfer
try {
  await transfer.handler(
    runtime,
    {
      content: {
        tokenAddress: TOKENS.USDC,
        recipient: '0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62',
        amount: '100',
      },
    },
    state
  );
} catch (error) {
  console.error('Transfer failed:', error.message);
}
```

## Links
- [ZKSync Documentation](https://docs.zksync.io/)
- [Matter Labs Blog](https://blog.matter-labs.io/)
- [ZKSync GitHub](https://github.com/matter-labs/zksync-era)
````
